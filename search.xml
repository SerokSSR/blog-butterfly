<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo：为你的博客配置 PWA</title>
      <link href="/hexo-gulp-pwa/"/>
      <url>/hexo-gulp-pwa/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo：使用-Gulp-为你的博客配置-PWA"><a href="#Hexo：使用-Gulp-为你的博客配置-PWA" class="headerlink" title="Hexo：使用 Gulp 为你的博客配置 PWA"></a>Hexo：使用 Gulp 为你的博客配置 PWA</h1><div class="note warning">            <p>使用这个方法之前，请先卸载掉其它的 PWA 插件。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>渐进式网络应用程式（英语：Progressive Web Apps，简称：PWA）是一种普通网页或网站架构起来的网络应用程式，但它可以以传统应用程式或原生移动应用程式形式展示给用户。这种应用程式形态视图将目前最为现代化的浏览器提供的功能与行动装置的体验优势相结合。</p><p>当你的网站实现了 PWA，那就代表了</p><ul><li>用户可以添加你的博客到电脑/手机的桌面，以原生应用般的方式浏览你的博客</li><li>用户本地可以自动生成缓存，二次访问速度大大加快</li><li>用户可以离线浏览你的博客</li></ul><p>下面的 PWA实现方法借助了 Gulp插件，在站点有内容更新时，可以弹窗提醒用户刷新页面。</p><h2 id="开启主题相关设置"><a href="#开启主题相关设置" class="headerlink" title="开启主题相关设置"></a>开启主题相关设置</h2><p>以 Butterfly 主题为例，在 <code>butterfly.yml</code> 中开启 PWA 选项</p><p>实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Yaml"><span class="hljs-attr">pwa:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">manifest:</span> <span class="hljs-string">/manifest.json</span> <span class="hljs-comment"># 清单文件，下文将介绍如何生成</span><br>  <span class="hljs-attr">theme_color:</span> <span class="hljs-string">&quot;#fff&quot;</span> <span class="hljs-comment"># 应用程序顶栏的背景色</span><br>  <span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/img/pwa/apple-touch-icon.png</span> <span class="hljs-comment"># 192 * 192 像素，添加至苹果移动设备的主屏幕后显示的图标，尽量使用 png 格式</span><br>  <span class="hljs-attr">favicon_32_32:</span> <span class="hljs-string">/img/pwa/32.png</span> <span class="hljs-comment"># 32 * 32 像素，网页图标</span><br>  <span class="hljs-attr">favicon_16_16:</span> <span class="hljs-string">/img/pwa/16.png</span> <span class="hljs-comment"># 16 * 16 像素，网页图标</span><br>  <span class="hljs-attr">mask_icon:</span> <span class="hljs-string">/img/pwa/safari-pinned-tab.svg</span> <span class="hljs-comment"># 苹果电脑 Touch Bar 区域显示的收藏栏封面图，须使用 svg 格式</span><br></code></pre></td></tr></table></figure><p><strong>图片尺寸要求（单位：像素）：</strong></p><ul><li>apple_touch_icon：192*192</li><li>mask_icon：viewBox的值必须是 0 0 16 16</li></ul><p>如果你的主题没有内置PWA，下面附有Butterfly主题的PWA部分，可以根据你所用的主题进行调整，并插入到html生成模板的head处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Pug">link(rel&#x3D;&quot;manifest&quot; href&#x3D;url_for(theme.pwa.manifest))<br>if(theme.pwa.theme_color) <br>  meta(name&#x3D;&quot;theme-color&quot; content&#x3D;theme.pwa.theme_color)<br>if(theme.pwa.theme_color) <br>  meta(name&#x3D;&quot;msapplication-TileColor&quot; content&#x3D;theme.pwa.theme_color)<br>if(theme.pwa.apple_touch_icon) <br>  link(rel&#x3D;&quot;apple-touch-icon&quot; sizes&#x3D;&quot;180x180&quot; href&#x3D;url_for(theme.pwa.apple_touch_icon))<br>if(theme.pwa.favicon_32_32) <br>  link(rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;png&quot; sizes&#x3D;&quot;32x32&quot; href&#x3D;url_for(theme.pwa.favicon_32_32))<br>if(theme.pwa.favicon_16_16)<br>  link(rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;png&quot; sizes&#x3D;&quot;16x16&quot; href&#x3D;url_for(theme.pwa.favicon_16_16))<br>if(theme.pwa.mask_icon)<br>  link(rel&#x3D;&quot;mask-icon&quot; href&#x3D;url_for(theme.pwa.mask_icon) color&#x3D;&quot;#5bbad5&quot;)<br></code></pre></td></tr></table></figure><h2 id="配置-manifest-json"><a href="#配置-manifest-json" class="headerlink" title="配置 manifest.json"></a>配置 <code>manifest.json</code></h2><p>创建 <code>manifest.json</code>，路径应与配置文件中所填路径相同。</p><p><b>实例及配置说明：</b></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Serok&#x27;s Blog&quot;</span>, <span class="hljs-comment">// 应用全称</span><br>  <span class="hljs-attr">&quot;short_name&quot;</span>: <span class="hljs-string">&quot;Seeker&quot;</span>, <span class="hljs-comment">// 应用简称</span><br>  <span class="hljs-attr">&quot;theme_color&quot;</span>: <span class="hljs-string">&quot;#49b1f5&quot;</span>, <span class="hljs-comment">// 应用主题色</span><br>  <span class="hljs-attr">&quot;background_color&quot;</span>: <span class="hljs-string">&quot;#49b1f5&quot;</span>, <span class="hljs-comment">// 加载应用时的背景色</span><br>  <span class="hljs-attr">&quot;display&quot;</span>: <span class="hljs-string">&quot;minimal-ui&quot;</span>, <span class="hljs-comment">// 首選顯示模式</span><br>  <span class="hljs-comment">//更多顯示模式：&quot;fullscreen&quot;, &quot;standalone&quot;, &quot;browser&quot;</span><br>  <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">&quot;start_url&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">&quot;icons&quot;</span>: [ <br>    <span class="hljs-comment">// 指定 icons 參數，用來適配不同設備</span><br>    <span class="hljs-comment">// 需為 png 格式，至少包含一个 192 * 192 像素的圖標</span><br>    &#123; <br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;https://snow.js.org/image/pwaicons/192.png&quot;</span>, <span class="hljs-comment">// 建议采用绝对路径</span><br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;192x192&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">&quot;splash_pages&quot;</span>: <span class="hljs-literal">null</span> <span class="hljs-comment">// 自定義启动动画</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note warning">            <p>Hexo采用的是严格 Json规范，因此 <code>manifest.json</code> 文件配置好后，需删除文件中的所有注释。</p>          </div><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在命令行中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Powershell">npm install workbox<span class="hljs-literal">-build</span> gulp -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br></code></pre></td></tr></table></figure><h2 id="创建-gulpfile-js-文件"><a href="#创建-gulpfile-js-文件" class="headerlink" title="创建 gulpfile.js 文件"></a>创建 <code>gulpfile.js</code> 文件</h2><p>在博客的根目录下，创建一个 <code>gulpfile.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;gulp&quot;</span>);<br><span class="hljs-keyword">const</span> workbox = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;workbox-build&quot;</span>);<br><br>gulp.task(<span class="hljs-string">&#x27;generate-service-worker&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> workbox.injectManifest(&#123;<br>        swSrc: <span class="hljs-string">&#x27;./sw-template.js&#x27;</span>,<br>        swDest: <span class="hljs-string">&#x27;./public/sw.js&#x27;</span>,<br>        globDirectory: <span class="hljs-string">&#x27;./public&#x27;</span>,<br>        globPatterns: [<br>            <span class="hljs-string">&quot;**/*.&#123;html,css,js,json,woff2&#125;&quot;</span><br>        ],<br>        modifyURLPrefix: &#123;<br>            <span class="hljs-string">&quot;&quot;</span>: <span class="hljs-string">&quot;./&quot;</span><br>        &#125;<br>    &#125;);<br>&#125;);<br><br>gulp.task(<span class="hljs-string">&quot;build&quot;</span>, gulp.series(<span class="hljs-string">&quot;generate-service-worker&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="创建-sw-template-js-文件"><a href="#创建-sw-template-js-文件" class="headerlink" title="创建 sw-template.js 文件"></a>创建 <code>sw-template.js</code> 文件</h2><p>在博客的根目录下，创建一个 <code>sw-template.js</code> 文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> workboxVersion = <span class="hljs-string">&#x27;5.1.3&#x27;</span>;<br><br>importScripts(<span class="hljs-string">`https://storage.googleapis.com/workbox-cdn/releases/<span class="hljs-subst">$&#123;workboxVersion&#125;</span>/workbox-sw.js`</span>);<br><br>workbox.core.setCacheNameDetails(&#123;<br>    prefix: <span class="hljs-string">&quot;Serok&#x27;s Blog&quot;</span><br>&#125;);<br><br>workbox.core.skipWaiting();<br><br>workbox.core.clientsClaim();<br><br>workbox.precaching.precacheAndRoute(self.__WB_MANIFEST,&#123;<br>    directoryIndex: <span class="hljs-literal">null</span><br>&#125;);<br><br>workbox.precaching.cleanupOutdatedCaches();<br><br><span class="hljs-comment">// Images</span><br>workbox.routing.registerRoute(<br>    /\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/,<br>    <span class="hljs-keyword">new</span> workbox.strategies.CacheFirst(&#123;<br>        cacheName: <span class="hljs-string">&quot;images&quot;</span>,<br>        plugins: [<br>            <span class="hljs-keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;<br>                maxEntries: <span class="hljs-number">1000</span>,<br>                maxAgeSeconds: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span><br>            &#125;),<br>            <span class="hljs-keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;<br>                statuses: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>]<br>            &#125;)<br>        ]<br>    &#125;)<br>);<br><br><span class="hljs-comment">// Fonts</span><br>workbox.routing.registerRoute(<br>    /\.(?:eot|ttf|woff|woff2)$/,<br>    <span class="hljs-keyword">new</span> workbox.strategies.CacheFirst(&#123;<br>        cacheName: <span class="hljs-string">&quot;fonts&quot;</span>,<br>        plugins: [<br>            <span class="hljs-keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;<br>                maxEntries: <span class="hljs-number">1000</span>,<br>                maxAgeSeconds: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span><br>            &#125;),<br>            <span class="hljs-keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;<br>                statuses: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>]<br>            &#125;)<br>        ]<br>    &#125;)<br>);<br><br><span class="hljs-comment">// Google Fonts</span><br>workbox.routing.registerRoute(<br>    /^https:\/\/fonts\.googleapis\.com/,<br>    <span class="hljs-keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;<br>        cacheName: <span class="hljs-string">&quot;google-fonts-stylesheets&quot;</span><br>    &#125;)<br>);<br>workbox.routing.registerRoute(<br>    /^https:\/\/fonts\.gstatic\.com/,<br>    <span class="hljs-keyword">new</span> workbox.strategies.CacheFirst(&#123;<br>        cacheName: <span class="hljs-string">&#x27;google-fonts-webfonts&#x27;</span>,<br>        plugins: [<br>            <span class="hljs-keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;<br>                maxEntries: <span class="hljs-number">1000</span>,<br>                maxAgeSeconds: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span><br>            &#125;),<br>            <span class="hljs-keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;<br>                statuses: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>]<br>            &#125;)<br>        ]<br>    &#125;)<br>);<br><br><span class="hljs-comment">// Static Libraries</span><br>workbox.routing.registerRoute(<br>    /^https:\/\/cdn\.jsdelivr\.net/,<br>    <span class="hljs-keyword">new</span> workbox.strategies.CacheFirst(&#123;<br>        cacheName: <span class="hljs-string">&quot;static-libs&quot;</span>,<br>        plugins: [<br>            <span class="hljs-keyword">new</span> workbox.expiration.ExpirationPlugin(&#123;<br>                maxEntries: <span class="hljs-number">1000</span>,<br>                maxAgeSeconds: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span><br>            &#125;),<br>            <span class="hljs-keyword">new</span> workbox.cacheableResponse.CacheableResponsePlugin(&#123;<br>                statuses: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>]<br>            &#125;)<br>        ]<br>    &#125;)<br>);<br><br>workbox.googleAnalytics.initialize();<br></code></pre></td></tr></table></figure><p><b>注意：把 prefix 修改为你博客的名字（最好用英文）。</b></p><p>上面的文件涵盖了大多数资源的缓存策略。如果你想缓存其他类型的资源（例如一些国内的镜像 CDN 库），或者想使用其他的缓存方式，请自行<a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies">查看相关文档</a>并添加。</p><h2 id="添加-js-进主题"><a href="#添加-js-进主题" class="headerlink" title="添加 js 进主题"></a>添加 js 进主题</h2><p>配置 <code>butterfly.yml</code>, 添加需要的 css 和 js</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Yaml"><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&lt;style type=&quot;text/css&quot;&gt;.app-refresh&#123;position:fixed;top:-2.2rem;left:0;right:0;z-index:99999;padding:0 1rem;font-size:15px;height:2.2rem;transition:all .3s ease&#125;.app-refresh-wrap&#123;display:flex;color:#fff;height:100%;align-items:center;justify-content:center&#125;.app-refresh-wrap a&#123;color:#fff;text-decoration:underline;cursor:pointer&#125;&lt;/style&gt;&#x27;</span><br>  <span class="hljs-attr">bottom:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&lt;div class=&quot;app-refresh&quot; id=&quot;app-refresh&quot;&gt; &lt;div class=&quot;app-refresh-wrap&quot;&gt; &lt;label&gt;✨ 网站已更新最新版本 👉&lt;/label&gt; &lt;a href=&quot;javascript:void(0)&quot; onclick=&quot;location.reload()&quot;&gt;点击刷新&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt;function showNotification()&#123;if(GLOBAL_CONFIG.Snackbar)&#123;var t=&quot;light&quot;===document.documentElement.getAttribute(&quot;data-theme&quot;)?GLOBAL_CONFIG.Snackbar.bgLight:GLOBAL_CONFIG.Snackbar.bgDark,e=GLOBAL_CONFIG.Snackbar.position;Snackbar.show(&#123;text:&quot;已更新最新版本&quot;,backgroundColor:t,duration:5e5,pos:e,actionText:&quot;点击刷新&quot;,actionTextColor:&quot;#fff&quot;,onActionClick:function(t)&#123;location.reload()&#125;&#125;)&#125;else&#123;var o=`top: 0; background: $&#123;&quot;light&quot;===document.documentElement.getAttribute(&quot;data-theme&quot;)?&quot;#49b1f5&quot;:&quot;#1f1f1f&quot;&#125;;`;document.getElementById(&quot;app-refresh&quot;).style.cssText=o&#125;&#125;&quot;serviceWorker&quot;in navigator&amp;&amp;(navigator.serviceWorker.controller&amp;&amp;navigator.serviceWorker.addEventListener(&quot;controllerchange&quot;,function()&#123;showNotification()&#125;),window.addEventListener(&quot;load&quot;,function()&#123;navigator.serviceWorker.register(&quot;/sw.js&quot;)&#125;));&lt;/script&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p>同样，如果你使用的不是Butterfly主题，可以在所示代码的基础上修改以适配你的主题。以下是展开后的代码，便于修改调试。</p><h3 id="以下代码请插入到头部-lt-head-gt-之前："><a href="#以下代码请插入到头部-lt-head-gt-之前：" class="headerlink" title="以下代码请插入到头部 &lt;/head&gt; 之前："></a>以下代码请插入到头部 <code>&lt;/head&gt;</code> 之前：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="css">  <span class="hljs-selector-class">.app-refresh</span> &#123;</span><br>    position: fixed;<br><span class="css">    <span class="hljs-selector-tag">top</span>: <span class="hljs-selector-tag">-2</span><span class="hljs-selector-class">.2rem</span>;</span><br>    left: 0;<br>    right: 0;<br>    z-index: 99999;<br>    padding: 0 1rem;<br>    font-size: 15px;<br><span class="css">    <span class="hljs-selector-tag">height</span>: 2<span class="hljs-selector-class">.2rem</span>;</span><br><span class="css">    <span class="hljs-selector-tag">transition</span>: <span class="hljs-selector-tag">all</span> 0<span class="hljs-selector-class">.3s</span> <span class="hljs-selector-tag">ease</span>;</span><br>  &#125;<br><span class="css">  <span class="hljs-selector-class">.app-refresh-wrap</span> &#123;</span><br>    display: flex;<br><span class="css">    <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span><br>    height: 100%;<br>    align-items: center;<br>    justify-content: center;<br>  &#125;<br><br><span class="css">  <span class="hljs-selector-class">.app-refresh-wrap</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">    <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#fff</span>;</span><br>    text-decoration: underline;<br>    cursor: pointer;<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="以下代码请插入到底部-lt-body-gt-之前："><a href="#以下代码请插入到底部-lt-body-gt-之前：" class="headerlink" title="以下代码请插入到底部 &lt;/body&gt; 之前："></a>以下代码请插入到底部 <code>&lt;/body&gt;</code> 之前：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-refresh&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app-refresh&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-refresh-wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>✨ 网站已更新最新版本 👉<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0)&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;location.reload()&quot;</span>&gt;</span>点击刷新<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;</span><br>    if (navigator.serviceWorker.controller) &#123;<br><span class="javascript">      navigator.serviceWorker.addEventListener(<span class="hljs-string">&#x27;controllerchange&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br>        showNotification()<br>      &#125;)<br>    &#125;<br><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      navigator.serviceWorker.register(<span class="hljs-string">&#x27;/sw.js&#x27;</span>)</span><br>    &#125;)<br>  &#125;<br><br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showNotification</span>(<span class="hljs-params"></span>) </span>&#123;</span><br>    if (GLOBAL_CONFIG.Snackbar) &#123;<br><span class="javascript">      <span class="hljs-keyword">var</span> snackbarBg =</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.documentElement.getAttribute(<span class="hljs-string">&#x27;data-theme&#x27;</span>) === <span class="hljs-string">&#x27;light&#x27;</span></span><br>          ? GLOBAL_CONFIG.Snackbar.bgLight<br>          : GLOBAL_CONFIG.Snackbar.bgDark<br><span class="javascript">      <span class="hljs-keyword">var</span> snackbarPos = GLOBAL_CONFIG.Snackbar.position</span><br>      Snackbar.show(&#123;<br><span class="javascript">        text: <span class="hljs-string">&#x27;已更新最新版本&#x27;</span>,</span><br>        backgroundColor: snackbarBg,<br>        duration: 500000,<br>        pos: snackbarPos,<br><span class="javascript">        actionText: <span class="hljs-string">&#x27;点击刷新&#x27;</span>,</span><br><span class="javascript">        actionTextColor: <span class="hljs-string">&#x27;#fff&#x27;</span>,</span><br><span class="javascript">        onActionClick: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;</span><br>          location.reload()<br>        &#125;,<br>      &#125;)<br><span class="javascript">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">      <span class="hljs-keyword">var</span> showBg =</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.documentElement.getAttribute(<span class="hljs-string">&#x27;data-theme&#x27;</span>) === <span class="hljs-string">&#x27;light&#x27;</span></span><br><span class="javascript">          ? <span class="hljs-string">&#x27;#49b1f5&#x27;</span></span><br><span class="javascript">          : <span class="hljs-string">&#x27;#1f1f1f&#x27;</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> cssText = <span class="hljs-string">`top: 0; background: <span class="hljs-subst">$&#123;showBg&#125;</span>;`</span></span><br><span class="javascript">      <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app-refresh&#x27;</span>).style.cssText = cssText</span><br>    &#125;<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>为了方便每次部署，可以在你的博客根目录下新建 <code>deploy.sh</code>，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start&quot;</span><br>hexo clean<br>hexo generate<br>gulp<br>hexo deploy<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Finish&quot;</span><br><span class="hljs-built_in">echo</span> 按任意键继续<br><span class="hljs-built_in">read</span> -n 1<br></code></pre></td></tr></table></figure><p>然后每次部署就可以直接运行这个脚本了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gulp </tag>
            
            <tag> PWA </tag>
            
            <tag> 应用程序 </tag>
            
            <tag> 部署 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单数论</title>
      <link href="/num-theory/"/>
      <url>/num-theory/</url>
      
        <content type="html"><![CDATA[<h1 id="简单数论"><a href="#简单数论" class="headerlink" title="简单数论"></a>简单数论</h1><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>又称辗转相除法<br>迭代求两数 gcd 的做法<br>由 (a, b) = (a, ka + b) 的性质：gcd(a, b) = gcd(b, a mod b)<br>容易证明这么做的复杂度是 O(log n)<br>裴蜀定理</p><h2 id="裴蜀"><a href="#裴蜀" class="headerlink" title="裴蜀"></a>裴蜀</h2><p>设(a, b) = d，则对任意整数x, y，有d|(ax + by) 成立；<br>特别地，一定存在x, y 满足ax + by = d<br>等价的表述：不定方程ax + by = c(a, b, c 为整数) 有解的充要条件为(a, b)|c<br>推论：a, b 互质等价于ax + by = 1 有解</p><h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h2><p>考虑如何求得ax + by = d 的一个解。这里d = (a, b)<br>考虑使用欧几里德算法的思想，令a = bq + r，其中r = a mod b；<br>递归求出bx + ry = d 的一个解。<br>设求出bx + ry = d 的一个解为x = x0, y = y0，考虑如何把它变形成ax + by = d 的解。<br>将a = bq + r 代入ax + by = d，化简得b(xq + y) + rx = d<br>我们令xq + y = x0, x = y0，则上式成立<br>故x = y0, y = x0 − y0q 为ax + by = d 的解<br>边界情况：b = 0 时，令x = 1, y = 0</p><h2 id="求不定方程所有解"><a href="#求不定方程所有解" class="headerlink" title="求不定方程所有解"></a>求不定方程所有解</h2><p>怎么求ax + by = c 的所有解？<br>先用exgcd 求出任意一个解x = x0, y = y0<br>再求出ax + by = 0 的最小的解<br>x = dx = b/(a, b), y = dy = −a/(a, b)<br>所有解就是x = x0 + kdx, y = y0 + kdy, k 取任意整数</p><h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组 &amp; 线段树 &amp; 扫描线</title>
      <link href="/tree-seg-scan/"/>
      <url>/tree-seg-scan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 扫描线 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划：区间、状压与树上 DP</title>
      <link href="/dp-noip-tg/"/>
      <url>/dp-noip-tg/</url>
      
        <content type="html"><![CDATA[<h1 id="区间-DP"><a href="#区间-DP" class="headerlink" title="区间 DP"></a>区间 DP</h1><h3 id="P1880-NOI1995-石子合并"><a href="#P1880-NOI1995-石子合并" class="headerlink" title="P1880 [NOI1995]石子合并"></a>P1880 [NOI1995]石子合并</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">220</span>;<br><br><span class="hljs-keyword">int</span> ans, dp[N][N], n, a[N], s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a+i);<br>        s[i] = s[i<span class="hljs-number">-1</span>] + a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        s[i+n] = s[i+n<span class="hljs-number">-1</span>] + a[i];<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">2</span>*n; ++i) dp[i][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">2</span>; l&lt;=n; ++l) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, j=l; j&lt;=<span class="hljs-number">2</span>*n; ++i, ++j) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=i; k&lt;j; ++k) &#123;<br>                dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i][k] + dp[k+<span class="hljs-number">1</span>][j] + s[j] - s[i<span class="hljs-number">-1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    ans = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-comment">//printf(&quot;%d &quot;, dp[i][i+n-1]);</span><br>        ans = <span class="hljs-built_in">min</span>(ans, dp[i][i+n<span class="hljs-number">-1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <br>    <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">2</span>*n; ++i) dp[i][i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">2</span>; l&lt;=n; ++l) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, j=l; j&lt;=<span class="hljs-number">2</span>*n; ++i, ++j) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=i; k&lt;j; ++k) &#123;<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i][k] + dp[k+<span class="hljs-number">1</span>][j] + s[j] - s[i<span class="hljs-number">-1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, dp[i][i+n<span class="hljs-number">-1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="状压-DP"><a href="#状压-DP" class="headerlink" title="状压 DP"></a>状压 DP</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>设全集为 $x$</p><ul><li><code>for(int y = x; y; y = (y-1) &amp; x)</code>：枚举 x 的每个子集</li><li><code>x^y</code>：x 集合中刨去 y</li><li><code>x&amp;y == y</code>：y 是 x 的子集</li></ul><h3 id="P3052-USACO12MAR-Cows-in-a-Skyscraper-G"><a href="#P3052-USACO12MAR-Cows-in-a-Skyscraper-G" class="headerlink" title="P3052 [USACO12MAR]Cows in a Skyscraper G"></a>P3052 [USACO12MAR]Cows in a Skyscraper G</h3><h1 id="树形-DP"><a href="#树形-DP" class="headerlink" title="树形 DP"></a>树形 DP</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 记忆化搜索 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo：配置 SSH 公钥部署</title>
      <link href="/hexo-ssh-deploy/"/>
      <url>/hexo-ssh-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo：配置-SSH-公钥部署"><a href="#Hexo：配置-SSH-公钥部署" class="headerlink" title="Hexo：配置 SSH 公钥部署"></a>Hexo：配置 SSH 公钥部署</h1><h2 id="配置-git-使用-ssh-密钥"><a href="#配置-git-使用-ssh-密钥" class="headerlink" title="配置 git 使用 ssh 密钥"></a>配置 git 使用 ssh 密钥</h2><p>git 支持 https 和 git 两种传输协议。其实两种方式都可以，但是如果使用https协议，每次pull、push都要输入密码（大部分电脑上），所以建议使用ssh密钥对认证，可实现免密且更加安全。下面将介绍Hexo如何配置 SSH 公钥部署。</p><p>示例在Windows环境下。</p><h3 id="Step-1：生成密钥对"><a href="#Step-1：生成密钥对" class="headerlink" title="Step 1：生成密钥对"></a>Step 1：生成密钥对</h3><p>- 进入 <code>C:\用户\[你的用户名]/.ssh</code> 文件夹，右键唤出 PowerShell</p><p>- 输入 <code>ssh-keygen</code>，并一直敲击回车至密钥图生成，可以看到文件夹中多出了两个文件：<code>id_rsa</code> 和 <code>id_rsa.pub</code></p><p><strong>实例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PowerShell">SerokSSR@Desktop<span class="hljs-literal">-ABCDEFG</span> ~\.ssh<br>&gt; ssh<span class="hljs-literal">-keygen</span>  <br>Generating public/private rsa key pair.<br>Enter file <span class="hljs-keyword">in</span> which to save the key (C:\Users\SerokSSR/.ssh/id_rsa): <br>Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): <br>Enter same passphrase again: <br>Your identification has been saved <span class="hljs-keyword">in</span> C:\Users\SerokSSR/.ssh/id_rsa.<br>Your public key has been saved <span class="hljs-keyword">in</span> C:\Users\SerokSSR/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:fO7pVFqZ464nC8H6B3pTE8cwPx2mTM0G8KJt7Or2L8o SerokSSR@DESKTOP<span class="hljs-literal">-ABCDEFG</span><br>The keys randomart image is:<br>+---[<span class="hljs-type">RSA</span> <span class="hljs-number">2048</span>]----+<br>|          ...+   |<br>|          o.. *  |<br>|          .B.= . |<br>|       o +..Bo.  |<br>|        S =o*.   |<br>|       ..*o= .   |<br>|      ...o=..    |<br>|      .o+=+o.    |<br>|       +E*BBo    |<br>+----[<span class="hljs-type">SHA256</span>]-----+<br></code></pre></td></tr></table></figure><h3 id="Step-2：配置远程仓库的公钥"><a href="#Step-2：配置远程仓库的公钥" class="headerlink" title="Step 2：配置远程仓库的公钥"></a>Step 2：配置远程仓库的公钥</h3><p>- 访问GitHub，点击 头像 -&gt; Settings -&gt; 左侧SSH and GPG keys -&gt; 右上New SSH key</p><p>- 打开你刚才生成的 <code>/.ssh/id_rsa.pub</code>，把里面的内容全选复制到Key栏中，Title栏可不填</p><p><img src="https://i.loli.net/2020/07/23/7NeufbtGsUzom8l.png" alt="image.png"></p><p>- 点击 Add SSH key，完成添加</p><h3 id="Step-3：验证密钥是否生效"><a href="#Step-3：验证密钥是否生效" class="headerlink" title="Step 3：验证密钥是否生效"></a>Step 3：验证密钥是否生效</h3><p>控制台输入 <code>ssh -T git@github.com</code>，出现如下回复则密钥已生效。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Powershell">SerokSSR@DESKTOP<span class="hljs-literal">-ABCDEFG</span> ~\.ssh<br>&gt; ssh <span class="hljs-literal">-T</span> git@github.com<br>Hi SerokSSR! Youve successfully authenticated, but GitHub does not provide shell access.<br></code></pre></td></tr></table></figure><h3 id="Step-4：添加-SSH-仓库"><a href="#Step-4：添加-SSH-仓库" class="headerlink" title="Step 4：添加 SSH 仓库"></a>Step 4：添加 SSH 仓库</h3><p>在你的博客根目录下的 <code>_config.yml</code>，找到 deploy选项，将你仓库的ssh链接添加至此处。</p><p><strong>实例：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:SerokSSR/snow.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h3 id="Step-5：配置Hexo部署"><a href="#Step-5：配置Hexo部署" class="headerlink" title="Step 5：配置Hexo部署"></a>Step 5：配置Hexo部署</h3><p>为了方便每次部署，可以在你的博客根目录下新建 <code>deploy.sh</code>，添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment">#!</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start&quot;</span><br>hexo clean<br>hexo generate<br>hexo deploy<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Finish&quot;</span><br><span class="hljs-built_in">echo</span> 按任意键继续<br><span class="hljs-built_in">read</span> -n 1<br></code></pre></td></tr></table></figure><p>然后每次部署就可以直接运行这个脚本，而不用每次都要敲一遍 <code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo d</code>了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 部署 </tag>
            
            <tag> 博客 </tag>
            
            <tag> SSH </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>涉江</title>
      <link href="/she-jiang/"/>
      <url>/she-jiang/</url>
      
        <content type="html"><![CDATA[<h2 id="涉江"><a href="#涉江" class="headerlink" title="涉江"></a>涉江</h2><div class="note default">            <p>公无渡河。公竟渡河。</p><p>堕河而死。其奈公何。</p>          </div><p>&emsp;&emsp;E 座的尽头是一扇窗。她喜欢伏在那里的窗棂上，很多个课间。窗外是一幢天井；三面环楼，夐不见曦。</p><p>&emsp;&emsp;天井的中央是一台鱼池。一到每年新生入学的时候，鱼们便如笋般冒了出来，流水潺潺，清荣峻茂；整个学校也像鱼池一样变得活络了起来。人们的脸上总是挂着笑容；鱼池旁也缀上了很多人影，来来往往的。</p><p>&emsp;&emsp;她的背后是一道走廊，连结着初中部和高一年级。原则上，高一的饮水机坏了，才会有人从这里经过，就比如这几天；那边的机器更高端，相传有四个水龙头。她听高三的学长们说，原先这里本是熙熙攘攘，那一年却突然间就变了天。或许今后也会有那一年吧。走廊里时常有行为艺术家们走过，小嘴抹蜜，应节而舞，免不了一群男女从旁指点，逼逼赖赖。也有三三两两的女生们，攒聚喁喁。偶尔天亮的时候，也会有许多男同，两两联会，而姐妹相称。</p><p>&emsp;&emsp;但这些都与她无关。她相信未来，相信辰星在无边的旷野，正如大多数人一样。她可能还没有想到过那样的一天，雪花浸满了每一个角落。空自，她守望着梦乡。</p><p>&emsp;&emsp;楼下有一群人走过，为首的迨着球。教室里传来九日的声响。他似乎看见了她。她的思绪仍然飘在远方，漠然颔首。</p><p>&emsp;&emsp;他们走上楼来。他一迳向 E 座的尽头走去。值勤的女生认出了他，嘴唇微微动了动，遽把脸扭了过去，没有作声。他也照着做了。那扇窗静静地在那里；窗闩没有扣严，被一阵狂风吹散了。他正要上前，风却一瞬间弱了下去。太阳拐了一个弯；和煦的光洒遍了他和她的窗。微风摩挲着窗扇，像一只系在法线上的蝴蝶。</p><p>&emsp;&emsp;她和他站在那里，看着归帆迤逦着向远方飘散。日光投靠在他的身侧，渲染出几许明媚的景致来，蹦跳着走远了。水波轻轻地颤动着。月亮干咳了几下，发出沙沙的响声，挑达在城阙上。兰麝香仍在，珮环声渐远。</p><div class="note success">            <p>未完待续</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
          <category> 陌上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划：0-1、完全与多重背包</title>
      <link href="/dp-knapsack/"/>
      <url>/dp-knapsack/</url>
      
        <content type="html"><![CDATA[<p>给定 $n$ 个重量为 $w_1,w_2,…,w_n$，价值为 $v_1,v_2,…,v_n$ 的物品价值为的物品和容量为 $C$ 的背包，求使得在满足背包容量的前提下，包内的最大总价值。</p><h1 id="0-1-背包"><a href="#0-1-背包" class="headerlink" title="0-1 背包"></a>0-1 背包</h1><p>用 $F(n,C)$ 表示将前 $n$ 个物品放进容量为 $C$ 的背包里，得到的最大价值。</p><p>我们用自顶向下的角度来看，假如我们已经进行到了最后一步（即求解将 $n$ 个物品放到背包里获得的最大价值），此时我们便有两种选择：</p><p>- 不放第 $n$ 个物品，此时总价值为 $F(n-1,C)$</p><p>- 放置 $n$ 个物品，此时总价值为 $v_n+F(n-1,c-w_n)$</p><p>两种选择中总价值最大的方案就是我们的最终方案，即</p><p>$$<br>F(i,C)=\max{F(i-1,C),v_i+F(i-1,C-w_i)}<br>$$</p><p>Code：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    * 解决背包问题的递归函数</span><br><span class="hljs-string">    *</span><br><span class="hljs-string">    * @param w        物品的重量数组</span><br><span class="hljs-string">    * @param v        物品的价值数组</span><br><span class="hljs-string">    * @param index    当前待选择的物品索引</span><br><span class="hljs-string">    * @param capacity 当前背包有效容量</span><br><span class="hljs-string">    * @return            最大价值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve</span>(<span class="hljs-params">w, v, index, capacity</span>):</span><br>    <span class="hljs-comment"># 基准条件：如果索引无效或者容量不足，直接返回当前价值0</span><br>    <span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> capacity &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 不放第index个物品所得价值</span><br>    res = solve(w, v, index - <span class="hljs-number">1</span>, capacity)<br>    <span class="hljs-comment"># 放第index个物品所得价值（前提是：第index个物品可以放得下）</span><br>    <span class="hljs-keyword">if</span> w[index] &lt;= capacity: <br>        res = max(res, v[index] + solveKS(w, v, index - <span class="hljs-number">1</span>, capacity - w[index]))<br>        <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack</span>(<span class="hljs-params">w, v, C</span>):</span><br>    size = len(w)<br>    <span class="hljs-keyword">return</span> solve(w, v, size - <span class="hljs-number">1</span>, C)<br></code></pre></td></tr></table></figure><h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><p>我们用递归方法可以很简单的实现以上代码，但是有个严重的问题就是，直接采用自顶向下的递归算法会导致要不止一次的解决公共子问题，因此效率是相当低下的。</p><p>我们可以将已经求得的子问题的结果保存下来，这样对子问题只会求解一次，这便是记忆化搜索。</p><p>Code：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve</span>(<span class="hljs-params">w, v, index, capacity</span>):</span><br>    <span class="hljs-keyword">global</span> memo<br>    <span class="hljs-comment"># 基准条件：如果索引无效或者容量不足，直接返回当前价值0</span><br>    <span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> capacity &lt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 如果此子问题已经求解过，则直接返回上次求解的结果</span><br>    <span class="hljs-keyword">if</span> memo[index][capacity] != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> memo[index][capacity]<br><br>    <span class="hljs-comment"># 不放第index个物品所得价值</span><br>    res = solve(w, v, index - <span class="hljs-number">1</span>, capacity)<br>    <span class="hljs-comment"># 放第index个物品所得价值（前提是：第index个物品可以放得下）</span><br>    <span class="hljs-keyword">if</span> w[index] &lt;= capacity:<br>        res = max(res, v[index] + solve(w, v, index - <span class="hljs-number">1</span>, capacity - w[index]))<br>    <span class="hljs-comment"># 添加子问题的解，便于下次直接使用</span><br>    memo[index][capacity] = res<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">knapsack</span>(<span class="hljs-params">w, v, C</span>):</span><br>    <span class="hljs-keyword">global</span> memo<br>    size = len(w)<br>    memo = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(C + <span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(size)]<br>    <span class="hljs-keyword">return</span> solve(w, v, size - <span class="hljs-number">1</span>, C)<br><br>w = [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br>v = [<span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">15</span>]<br>print(knapsack(w, v, <span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><h3 id="P2196-挖地雷"><a href="#P2196-挖地雷" class="headerlink" title="P2196 挖地雷"></a>P2196 挖地雷</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">30</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span> &lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt; piv;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; g[N]; <br><br><span class="hljs-keyword">int</span> s1[N], n, w[N], in[N];<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; ss[N];<br><br>piv ans;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">outp</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;ans)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = ans.<span class="hljs-built_in">begin</span>(); it != ans.<span class="hljs-built_in">end</span>(); ++it) <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *it);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function">piv <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(s1[x]) &#123;<br>        <span class="hljs-keyword">return</span> (piv)&#123;s1[x], ss[x]&#125;;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(g[x].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) &#123;<br>        s1[x] = w[x]; ss[x].<span class="hljs-built_in">clear</span>(); ss[x].push_back(x);<br>        <span class="hljs-keyword">return</span> (piv)&#123;s1[x], ss[x]&#125;;<br>    &#125;<br>    s1[x] = w[x];<br>    ss[x].push_back(x);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; st = ss[x];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;::iterator it = g[x].<span class="hljs-built_in">begin</span>(); it != g[x].<span class="hljs-built_in">end</span>(); ++it) &#123;<br>        piv p = dfs(*it, s);<br>        <span class="hljs-keyword">if</span>(p.first + w[x] &gt; s1[x]) &#123;<br>            s1[x] = p.first + w[x];<br>            ss[x] = st;<br>            ss[x].insert(ss[x].<span class="hljs-built_in">end</span>(), p.second.<span class="hljs-built_in">begin</span>(), p.second.<span class="hljs-built_in">end</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (piv)&#123;s1[x], ss[x]&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, w+i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, a; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>; j&lt;=n; ++j) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>            <span class="hljs-keyword">if</span>(a) g[i].push_back(j), ++in[j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(!in[i]) &#123;<br>            piv p = dfs(i, ss[i]);<br>            <span class="hljs-keyword">if</span>(p.first &gt; ans.first) &#123;<br>                ans.first = p.first;<br>                ans.second.<span class="hljs-built_in">clear</span>();<br>                ans.second.insert(ans.second.<span class="hljs-built_in">end</span>(), p.second.<span class="hljs-built_in">begin</span>(), p.second.<span class="hljs-built_in">end</span>());<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    outp(ans.second);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans.first);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><p>$$<br>F(i,j)=<br>\begin{cases}<br>F(i-1,j)&amp; j \leq w_i\<br>\max{F(i-1,j),F(i-1,j-w_i)+v_i}&amp; j &gt; w_i<br>\end{cases}<br>$$</p><p>注意二维转换成一维的时候，$j$ 要<b>从后向前</b>枚举，因为每次的新结果都是根据上一个结果来求得的，从后向前可避免重复取同一物品。</p><h3 id="P1455-搭配购买"><a href="#P1455-搭配购买" class="headerlink" title="P1455 搭配购买"></a>P1455 搭配购买</h3><p>并查集 + 01背包。</p><p>Code：（2019.12.01）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">11000</span>; <br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> c, d;<br>&#125; val[N], tmp[N];<br><br><span class="hljs-keyword">int</span> n, m, w, fa[N], <span class="hljs-built_in">list</span>[N], dp[N], t, ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">bool</span> flag[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">root</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = root(fa[x]);<br>&#125;<br><br><span class="hljs-keyword">void</span> <span class="hljs-keyword">operator</span> +=(node &amp;A, node B) &#123;<br>    A.c += B.c, A.d += B.d;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;w);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) fa[i] = i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;val[i].c, &amp;val[i].d);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u, v;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        <span class="hljs-keyword">int</span> u1 = root(u), v1 = root(v);<br>        fa[u1] = v1;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) root(i);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) tmp[fa[i]] += val[i];<br>    <br>    <span class="hljs-built_in">memcpy</span>(<span class="hljs-built_in">list</span>+<span class="hljs-number">1</span>, fa+<span class="hljs-number">1</span>, n*<span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">std</span>::sort(<span class="hljs-built_in">list</span>+<span class="hljs-number">1</span>, <span class="hljs-built_in">list</span>+n+<span class="hljs-number">1</span>);<br>    t = <span class="hljs-built_in">std</span>::unique(<span class="hljs-built_in">list</span>+<span class="hljs-number">1</span>, <span class="hljs-built_in">list</span>+n+<span class="hljs-number">1</span>) - (<span class="hljs-built_in">list</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=t; ++i) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=w; j&gt;=tmp[<span class="hljs-built_in">list</span>[i]].c; --j) <br>            dp[j] = <span class="hljs-built_in">std</span>::max(dp[j], dp[j - tmp[<span class="hljs-built_in">list</span>[i]].c] + tmp[<span class="hljs-built_in">list</span>[i]].d);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[w]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h1><p>与上面的01背包问题差别不大，只是多了一个条件：每个物品可以取无数次。</p><p>方法很简单，只要 $j$ <b>从前向后</b>枚举即可。这样做其实是变相利用了它的后效性，使同一个物品可以被多次取到。</p><h3 id="P1616-疯狂的采药"><a href="#P1616-疯狂的采药" class="headerlink" title="P1616 疯狂的采药"></a>P1616 疯狂的采药</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">int</span> t1, m, dp[<span class="hljs-keyword">int</span>(<span class="hljs-number">1e7</span>+<span class="hljs-number">10</span>)], t[<span class="hljs-keyword">int</span>(<span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>)], v[<span class="hljs-keyword">int</span>(<span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>)];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;t1, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, t+i, v+i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=t1; ++i) &#123;<br>        dp[i] = dp[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j) <br>            <span class="hljs-keyword">if</span>(i-t[j]&gt;=<span class="hljs-number">0</span>) dp[i] = <span class="hljs-built_in">max</span>(dp[i], dp[i-t[j]] + v[j]);<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[t1]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h1><p>留坑。</p><h2 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a>一句话总结</h2><p>零一背包倒着搜，完全背包正着搜，多重背包二进制存再套个 0-1 背包。</p><h1 id="依赖背包"><a href="#依赖背包" class="headerlink" title="依赖背包"></a>依赖背包</h1><p><a href="https://www.luogu.org/problemnew/show/P1064">金明</a>为我们提供一道模板．一个主件和它的附件集合实际上对应于分组背包中的一个物品组．<br>每个选择了主件又选择了若干附件的策略，对应这个物品组的中的一个物品．</p><p>定义如上，实际操作中可以先枚举主件，<strong>在选取主件的前提下</strong>枚举附件的可能性。</p><p>大概也没啥好说的，还有一道<a href="https://www.luogu.org/problemnew/show/P3961">P3961 黄金矿工</a>也是依赖背包的模型，按照斜率分类后<strong>应该先取近原点的才能取到远原点的，这里枚举附件就应该是递增的过程</strong>。</p><h1 id="分类背包"><a href="#分类背包" class="headerlink" title="分类背包"></a>分类背包</h1><div class="note ">            <p>这是所有背包问题的起点：</p><p>将物品分成几个组，每个组仅能至多选一个物品，求最大利益。</p>          </div><p>同样按照 0-1 背包的思路，我们可以把整个组看做一个物品，然后枚举每个组的所有物品找一个最大利益的，用式子表示即为：</p><p>$$<br>f[j]=\sum_{k=1}^{c[i]} \max(f[j],f[j-w[i][k]]+v[i][k])<br>$$</p><p>先放上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=c[<span class="hljs-number">0</span>]; i++)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=n; j&gt;=<span class="hljs-number">0</span>; j--)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k=<span class="hljs-number">1</span>; k&lt;=c[i]; k++)<br>        <span class="hljs-keyword">if</span> (j &gt;= w[i][k]) &#123;<br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - w[i][k]] + v[i][k]);<br>            ans=<span class="hljs-built_in">max</span>(ans,f[j]);<br>        &#125;<br></code></pre></td></tr></table></figure><p>可以注意到，我们<strong>先枚举容量再枚举每组的物品</strong>，这样可以保证对于每一个容量，组内物品最多只会保留一个当前最大的。</p><p>例题：CF946D</p><h2 id="二维费用背包"><a href="#二维费用背包" class="headerlink" title="二维费用背包"></a>二维费用背包</h2><p>别看到啥二维就觉得难度上了一个档。把数组开二维，循环开二维，暴力跑就行了，用式子写就是：</p><p>$$<br>f[v][u]=\max \begin{Bmatrix}f[v][u],f[v-a[i]][u-b[i]]+w[i]\end{Bmatrix}<br>$$</p><h2 id="泛化物品背包"><a href="#泛化物品背包" class="headerlink" title="泛化物品背包"></a>泛化物品背包</h2><div class="note default">            <p>一个泛化物品就是一个数组 $h[0..v]$，给它费用 $v$，可得到价值 $h[v]$，给你一个总容量 $V$ 的背包求最大价值。</p>          </div><p>这就是泛化背包的定义了。这其实就是个概念，可以看成是分组背包的强化版本，就是一个物品组有 v+1件物品，费用v，价值 h[v]，每组至多选一个的情况。<strong>事实上，泛化背包的标算就是转换成分组背包搞。</strong></p><p>当然，特殊地，对于以上的普通模型：</p><ul><li>如果它是01背包中的物品，那么把它看成泛化物品，它就是除了 $h(c)=w$ 其它函数值都为0的一个函数。</li><li>如果它是完全背包中的物品，那么它可以看成这样一个函数，仅当v被c整除时有 h(v)=v/c*w ，其它函数值均为0。</li><li>如果它是多重背包中重复次数最多为n的物品，那么它对应的泛化物品的函数有 h(v)=v/c*w 仅当v被c整除且 $v/c \leqslant n$ ，其它情况函数值均为0。</li><li>如果他是普通的分组背包，那么对于 $h(v)=w[i][j]$，仅当 $v=V[i][j]$，其他函数取值为0。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DP </tag>
            
            <tag> 背包 </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流：最大流</title>
      <link href="/maximum-flow/"/>
      <url>/maximum-flow/</url>
      
        <content type="html"><![CDATA[<h1 id="网络流：最大流"><a href="#网络流：最大流" class="headerlink" title="网络流：最大流"></a>网络流：最大流</h1><h2 id="EK"><a href="#EK" class="headerlink" title="EK"></a>EK</h2><p>增广路方法是很多网络流算法的基础。其思路是每次找出一条从源到汇的<strong>能够增加流的路径</strong>，调整流值和残留网络 ，<strong>直到没有增广路为止</strong>。</p><p>EK 算法就是不断的找最短路，找的方法就是每次找一条<strong>边数最少</strong>的增广（即最短路径增广）。</p><h3 id="最多要增广多少次？"><a href="#最多要增广多少次？" class="headerlink" title="最多要增广多少次？"></a>最多要增广多少次？</h3><p>可以证明，<b>最多 O(VE)</b>​ 次增广，可以达到最大流。</p><h3 id="如何找到一条增广路？"><a href="#如何找到一条增广路？" class="headerlink" title="如何找到一条增广路？"></a>如何找到一条增广路？</h3><p>先明确什么是增广路。增广路是一条从s到t的路径，路径上每条边残留容量都为正。把残留容量为正的边设为可行的边，那么我们就可以用简单的 <strong>BFS</strong> 得到边数最少的增广路。</p><h3 id="如何增广？"><a href="#如何增广？" class="headerlink" title="如何增广？"></a>如何增广？</h3><p>BFS 得到增广路之后，这条增广路能够增广的流值，是路径上<strong>最小残留容量边</strong>决定的。把这个最小残留容量 MinCap 值加到最大流值 Flow 上，同时路径上每条边的残留容量值减去 MinCap；最后，<strong>路径上每条边的反向边残留容量值要加上 MinCap</strong>。这样每次增广的复杂度为 **O(E)**，总复杂度就是 <b>O(VE<sup>2</sup>)</b>。事实上，大多数网络的增广次数很少，因此 EK 算法能处理绝大多数问题。</p><h3 id="为什么增广路径上每条边的反向边残留容量值要加上-MinCap？"><a href="#为什么增广路径上每条边的反向边残留容量值要加上-MinCap？" class="headerlink" title="为什么增广路径上每条边的反向边残留容量值要加上 MinCap？"></a>为什么增广路径上每条边的反向边残留容量值要加上 MinCap？</h3><p><strong>残留网络 = 容量网络 - 流量网络</strong></p><p>容量网络不改变的情况下，由于增广好比给增广路上通了一条流，路径上所有边流量加 MinCap 之后，相对应的残留网络就发生<strong>相反</strong>的改变。因为建立了反向边，如果这条路径不是最理想的就会回流，避免了这种情况。这是网络流里很重要的一点。</p><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/flow1.png" alt="img"></p><h2 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h2><h3 id="BFS-分层"><a href="#BFS-分层" class="headerlink" title="BFS 分层"></a>BFS 分层</h3><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=3378169721,650522187&fm=173&app=25&f=JPEG?w=640&h=360&s=45B43D7215EAD4E3186890DE000080B3" alt="img"></p><p>与EK一样，我们仍要通过 bfs 来判断图中是否还存在增广路，但是 Dinic 算法里的 bfs 略有不同。这次，我们不用记录路径，而是给每一个点分层，对于任意点 i，从 s 到 i 每多走过一个点，就让层数多 1。一次分层后可以找到多条增广路，从而提高效率。</p><p>分完层效果是这样的：（蓝色的数字是每个点层数）</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1570035932,108109570&fm=173&app=25&f=JPEG?w=640&h=360&s=44B42D7215EAD4E3187890DE000080B3" alt="img"></p><h3 id="DFS-增广"><a href="#DFS-增广" class="headerlink" title="DFS 增广"></a>DFS 增广</h3><p>有了每个点的层数编号，对任意点 u 到点 d 的路径如果有 $dep[d]=dep[u]+1$，我们就可以判断该路径在增广路上。</p><p>比如说，我们首先找 s-&gt;1-&gt;4-&gt;t：</p><p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=3046893860,1762669248&fm=173&app=25&f=JPEG?w=640&h=360&s=44B4297215EAD4E71C6890DE000080B3" alt="img"></p><p>第二次，s-&gt;1-&gt;5-&gt;t：</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=540564913,3708139900&fm=173&app=25&f=JPEG?w=640&h=360&s=64B4A87215EAD4E71C6C90DE000080B3" alt="img"></p><p>第三次，s-&gt;1-&gt;3-&gt;t：</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3523190815,2305233655&fm=173&app=25&f=JPEG?w=640&h=360&s=05B6ED3215EAD4E7186490DE000080B3" alt="img"></p><p>还有第四条，s-&gt;2-&gt;3-&gt;t：</p><p><img src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1230633075,4211996757&fm=173&app=25&f=JPEG?w=640&h=360&s=05B4E93215EAD4E7186090DE0000C0B3" alt="img"></p><p><strong>PS：Dinic 在跑二分图匹配时比匈牙利快很多。</strong></p><h2 id="P3376-网络最大流"><a href="#P3376-网络最大流" class="headerlink" title="P3376 网络最大流"></a>P3376 网络最大流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">11000</span>, M = <span class="hljs-number">110000</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, next;<br>&#125; e[M &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> cur[N], h[N], tot;<br><span class="hljs-keyword">int</span> dfn[N], ans, n, m, s, t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[tot] = node(&#123;u, v, w, h[u]&#125;);<br>    cur[u] = h[u] = tot++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memcpy</span>(cur, h, <span class="hljs-keyword">sizeof</span> cur);<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    dfn[s] = <span class="hljs-number">1</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> !dfn[v]) &#123;<br>                dfn[v] = dfn[u] + <span class="hljs-number">1</span>;<br>                q.push(v);<br>                <span class="hljs-keyword">if</span>(v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> low)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(u == t) <span class="hljs-keyword">return</span> low;<br>    <span class="hljs-keyword">int</span> w = low;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>        <span class="hljs-keyword">int</span> v = e[i].v;<br>        cur[u] = i;<br>        <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> dfn[v] == dfn[u] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> f = dfs(v, <span class="hljs-built_in">min</span>(w, e[i].w));<br>            <span class="hljs-keyword">if</span>(f == <span class="hljs-number">0</span>) dfn[v] = <span class="hljs-number">0</span>;<br>            e[i].w -= f; e[i^<span class="hljs-number">1</span>].w += f;<br>            w -= f;<br>            <span class="hljs-keyword">if</span>(!w) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low - w;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> flow;<br>    <span class="hljs-keyword">while</span>(bfs()) <span class="hljs-keyword">while</span>(flow = dfs(s, INF)) ans += flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, w; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        add(u, v, w);<br>        add(v, u, <span class="hljs-number">0</span>);<br>    &#125;<br>    dinic();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小割</title>
      <link href="/minimum-cut/"/>
      <url>/minimum-cut/</url>
      
        <content type="html"><![CDATA[<h1 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h1><p>将图 $G$ 分为 $A$ 和 $B$ 两个点集，$A$ 和 $B$ 之间的边的集合称为无向图的<b>割集</b>。带权图的<b>割 (Cut) </b>就是割集中的边权之和。</p><h2 id="S-T-最小割"><a href="#S-T-最小割" class="headerlink" title="S - T 最小割"></a>S - T 最小割</h2><p>特别地，对于一个网络，在满足 $源点 s \in 点集{S}, 汇点 t \in 点集{T}(S\cap T= \varnothing)$ 的情况下，<b>从 S 到 T 的边的权值和</b>被称为 <b>S 到 T 的割</b>。</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cut1.png" alt="img"></p><p>通俗地说，如果把你家和自来水厂之间的水管网络砍断了一些，那么自来水厂无论怎么放水，水都无法到达你们家，自然就停水了，砍掉的水管就是割。</p><p>砍水管的人自然希望花的力气越小越好。在所有割中，权值和最小的称为<strong>最小割</strong>。对于一个给定的 S - T 网络，如何求出它的最小割呢？</p><h2 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h2><p><b>网络的最大流等于最小割。</b></p><p>这个定理看起来很简单，但是真去思考的话其实是很麻烦的。</p><h3 id="证明-Step-1：任意一个流都小于等于任意一个割"><a href="#证明-Step-1：任意一个流都小于等于任意一个割" class="headerlink" title="证明 Step 1：任意一个流都小于等于任意一个割"></a>证明 Step 1：任意一个流都小于等于任意一个割</h3><p>自来水公司随便给你家通点水，构成一个流，随便砍几刀砍出一个割，那么由于容量限制，每一根的被砍的水管子流出的水流量都小于管子的容量。每一根被砍的水管的水本来都要到你家的，现在流到外面，加起来得到的流量还是等于原来的流。而管子的容量加起来就是割，所以流小于等于割。</p><p>由于上面的流和割都是任意构造的，所以<strong>任意一个流小于任意一个割</strong>，即<br>$$<br>\forall F \leqslant \forall C<br>$$</p><h3 id="Step-2：构造出一个流，使它等于一个割"><a href="#Step-2：构造出一个流，使它等于一个割" class="headerlink" title="Step 2：构造出一个流，使它等于一个割"></a>Step 2：构造出一个流，使它等于一个割</h3><p>当达到最大流时，根据增广路定理，残留网络中 s 到 t 已经没有通路了。因此，若把残余网络中 s 能到的的点的集合设为 S，不能到的点集为 T ，构造出一个割集 $C[点集S,点集T]$，所有由 S 发往 T 的边必然满流。并且，这些满流边的流量和就是当前的流，即<strong>最大流</strong>。把这些满流边作为割，就构造出了一个<strong>和最大流相等的割</strong>。</p><h3 id="Step-3：最大流等于最小割"><a href="#Step-3：最大流等于最小割" class="headerlink" title="Step 3：最大流等于最小割"></a>Step 3：最大流等于最小割</h3><p>设上一步构造出流和割分别为 $F_m$ 和 $C_m$。</p><p>又 $\forall F \leqslant \forall C$</p><p>$\therefore \forall F \leqslant F_m=C_m \leqslant \forall C$。</p><h3 id="网络流等价定理"><a href="#网络流等价定理" class="headerlink" title="网络流等价定理"></a>网络流等价定理</h3><p>（这个名字是我自己想的</p><p>综合最大流最小割定理和增广路定理，可以得到这样的结论：</p><blockquote><p>对于一个网络流图 $G=(V,E)$，其中有源点 $s$ 和汇点 $t$ ，那么下面三个条件是等价的：</p><ol><li><p>流 $f$ 是图 $G$ 的最大流；</p></li><li><p>残留网络 $G$ 不存在增广路；</p></li><li><p>在 $G$ 中必存在一个割 $C[S,T]$，使得 $f=C[S,T]$。</p></li></ol></blockquote><p><del>读者自证不难</del></p><h3 id="证明-1-gt-2（即增广路定理）"><a href="#证明-1-gt-2（即增广路定理）" class="headerlink" title="证明 1 =&gt; 2（即增广路定理）"></a>证明 1 =&gt; 2（即增广路定理）</h3><p>利用反证法，假设流 $f$ 是图 $G$ 的最大流，但是残留网络中还存在有增广路 $p$，其流量为 $f_p$，则有流 $f’=f+f_p&gt;f$。这与 $f$ 是最大流产生矛盾。</p><h3 id="证明-2-gt-3（即最大流最小割定理）"><a href="#证明-2-gt-3（即最大流最小割定理）" class="headerlink" title="证明 2 =&gt; 3（即最大流最小割定理）"></a>证明 2 =&gt; 3（即最大流最小割定理）</h3><p>总结一下上面的证明。</p><p>假设残留网络 $G_f$ 不存在增广路，所以在残留网络 $G_f$ 中不存在路径从 $s$ 到达 $t$。我们定义 $S$ 集合为当前残留网络中 $s$ 能够到达的点，同时定义 $T=V-S$，此时构成一个割 $C(S,T)$。</p><p>且 $u∈S,v∈T$，有 $f(u,v)=c(u,v)$。若 $f(u,v)&lt;c(u,v)$，则有 $G_f(u,v)&gt;0$，$s$ 可以到达 $v$，与 $v \in T$ 矛盾。</p><p>因此有 $f(S,T)= \sum f(u,v)=\sum c(u,v)=C(S,T)$。</p><h3 id="证明-3-gt-1："><a href="#证明-3-gt-1：" class="headerlink" title="证明 3 =&gt; 1："></a>证明 3 =&gt; 1：</h3><p>由于 $f$ 的上界为最小割，当 $f$ 到达割的容量时，显然就已经到达最大值，因此 $f$ 为最大流。</p><p>这样就说明了为什么找不到增广路时，所求得的一定是最大流。</p><h2 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h2><p>在一个图中，我们选取一些点构成集合，记为 V，且集合中的出边（即集合中的点的向外连出的弧），所指向的终点也在 V 中，则我们称 V 为闭合图。在所有闭合图中，集合中点的权值之和最大的 V，称为<strong>最大权闭合子图</strong>。</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cutt.png" alt="img"></p><p>上图中最大权闭合子图为 {3,4,5}。</p><h2 id="最大权闭合子图权值和"><a href="#最大权闭合子图权值和" class="headerlink" title="最大权闭合子图权值和"></a>最大权闭合子图权值和</h2><h3 id="构图"><a href="#构图" class="headerlink" title="构图"></a>构图</h3><p>构建一个超级源点 s，一个超级汇点 t，所有的点按权值的正负连接到 s 和 t 上，转换成一个边权值有向图，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cut2.png" alt="img"></p><p>（注：点权为 0 的点可以忽略，对结果没有影响）</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li>该带边权有向图的 S - T 最小割，割集中所有的边，都与 s 或 t 相连接。</li></ul><blockquote><p>显然，因为不与 s,t 相连的边，权值都是 INF，最小割不可能割在 INF 的边上。</p></blockquote><ul><li>该图中的每一个简单割产生的两个子图，我们记含有点 s 的是图 S，含有点 t 的是图 T，则图 S 是最大权闭合子图。</li></ul><blockquote><p>简单割内不包含边权为 INF 的边，即不含有连通两个图的边（除了连接在 t 点上的边之外）；即，图 S 中没有边与图 T 连通，那么，所有的边都只能连接在图 S 之内，即为闭合图。</p></blockquote><p>记割集中，所有连接在 s 上的边的权值和为 $x_1$，所有连接在 t 上的边的权值和为 $x_2$，则割集中所有边权值和为 $x=x_1+x_2$。</p><p>记图 S 中所有点的权值和为 $w$，记其中正权值之和为 $w_1$，负权值之和为 $- w_2$，故 $w = w_1 - w_2$。</p><p>因此，<br>$$<br>w+x=w_1-w_2+x_1-x_2<br>$$<br>又 ，<br>$$<br>x_2 = w_2<br>$$<br>因为图 S 中所有负权值的点必然连接到 t 点，而图 S 必然要与 t 分割开，故割集中，<strong>连接在 t 点上的边权值和</strong>就是<strong>图S中所有负权值点的权值之和取负</strong>。因而，<br>$$<br>w+x=w_1+x_1<br>$$<br>显然，$w_1 + x_1$ 是整个图中所有正权值之和，记为 $sum$，则<br>$$<br>w=sum-x<br>$$<br>即，<strong>图 S 中所有点的权值和 = 整个图中所有正权值之和 - 割集中所有边权值和</strong>。因为 $sum$ 为定值，只要我们取最小割，则<strong>图 S 中所有点的权值和</strong>就是最大的，即此时图 S 为最大权闭合子图。</p><h3 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h3><p>　　　　　<img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cut3.png" alt="img">　　　　　<img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cut4.png" alt="img"></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><ul><li><p>先记录整个图中，所有正点权值的和；</p></li><li><p>建立对应流网络，求最大流，最大流在数值上等于最小割，故我们得到了流网络的 s-t 最小割；</p></li><li><p><strong>所有正点权值的和</strong>减去 <strong>s-t 最小割</strong>，即得最大权闭合子图的权值和。</p></li></ul><h2 id="P2762-太空飞行计划问题"><a href="#P2762-太空飞行计划问题" class="headerlink" title="P2762 太空飞行计划问题"></a>P2762 太空飞行计划问题</h2><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>这里大概讲一下转换成最大流以后怎么输出。</p><p>一个结论就是假如我们跑的是 Dinic 那么我们最后一次网络流（这一次网络流并没有起任何作用，只是确认了无更多残余流量可以退出了）中，所有被分到层的都一定被选上了。</p><p>没有更多残余流量其实意味着这个图已经被割成了两部分，一个实验如果有层数意味着它没有被割掉（被选上了），一个仪器如果有层数意味着它已经被割掉了（也是被选上了）。</p><p>于是只要在最后输出所有有层数的点就行了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">char</span> tools[<span class="hljs-number">10000</span>];<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-keyword">int</span> u, v, w, next;<br>&#125; e[N * N];<br><br><span class="hljs-keyword">int</span> head[N], cur[N], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[tot] = &#123;u, v, w, head[u]&#125;;<br>    head[u] = tot++;<br>    e[tot] = &#123;v, u, <span class="hljs-number">0</span>, head[v]&#125;;<br>    head[v] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> h[N], n, m, s, t;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> cur);<br>    <br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    h[s] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> h[v] == <span class="hljs-number">0</span>) &#123;<br>                h[v] = h[u] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> low)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(u == t) <span class="hljs-keyword">return</span> low;<br>    <span class="hljs-keyword">int</span> w = low;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; i != <span class="hljs-number">-1</span>; i = e[i].next, cur[u] = i) &#123;<br>        <span class="hljs-keyword">int</span> v = e[i].v;<br>        <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> h[v] == h[u] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> f = dfs(v, <span class="hljs-built_in">min</span>(w, e[i].w));<br>            <span class="hljs-keyword">if</span>(f == <span class="hljs-number">0</span>) h[v] = <span class="hljs-number">0</span>;<br>            e[i].w -= f;<br>            e[i^<span class="hljs-number">1</span>].w += f;<br>            w -= f;<br>            <span class="hljs-keyword">if</span>(w == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low - w;<br>&#125;<br><span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> flow;<br>    <span class="hljs-keyword">while</span>(bfs()) <span class="hljs-keyword">while</span>(flow = dfs(s, INF)) maxflow += flow;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//freopen(&quot;shut2.in&quot;, &quot;r&quot;, stdin);</span><br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);<br>    <br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    s = <span class="hljs-number">0</span>, t = n+m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, w; i&lt;=m; ++i) &#123;<br>        <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w);<br>        add(s, i, w);<br>        sum += w;<br>        <br>        <span class="hljs-built_in">memset</span>(tools, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span> tools); <br>        <span class="hljs-built_in">cin</span>.getline(tools, <span class="hljs-number">10000</span>);<br>        <span class="hljs-keyword">int</span> ulen = <span class="hljs-number">0</span>, tool;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">sscanf</span>(tools + ulen, <span class="hljs-string">&quot;%d&quot;</span>, &amp;tool) == <span class="hljs-number">1</span>) &#123;<br>            add(i, tool + m, INF);<br>            <span class="hljs-keyword">if</span>(tool == <span class="hljs-number">0</span>) ulen++;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span>(tool) &#123;<br>                    tool /= <span class="hljs-number">10</span>;<br>                    ulen++;<br>                &#125;<br>            &#125;<br>            ulen++;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, w; i&lt;=n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w);<br>        add(i+m, t, w);<br>    &#125;<br>    <br>    dinic();<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) <span class="hljs-keyword">if</span>(h[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-keyword">if</span>(h[i+m]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum - maxflow);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全局最小割"><a href="#全局最小割" class="headerlink" title="全局最小割"></a>全局最小割</h2><p>暂时留坑，可以先参考<a href="https://blog.csdn.net/ddelphine/article/details/77935670">这篇文章</a>。</p><h3 id="Code-POJ-2914-未优化版"><a href="#Code-POJ-2914-未优化版" class="headerlink" title="Code (POJ 2914, 未优化版)"></a>Code (POJ 2914, 未优化版)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">550</span>;<br><br><span class="hljs-keyword">int</span> g[N][N];<br><span class="hljs-keyword">int</span> dis[N];<br><span class="hljs-keyword">bool</span> flag[N], vis[N];<br><span class="hljs-keyword">int</span> n, m, s, t;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF) &#123;<br>        <br>        <span class="hljs-built_in">memset</span>(g, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> g);<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, a, b, c; i&lt;=m; ++i) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>            ++a, ++b;<br>            g[a][b] += c; g[b][a] += c; <br>        &#125;<br>        <br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0x3f3f3f3f</span>;<br>        <span class="hljs-built_in">memset</span>(flag, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> flag);<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> o=<span class="hljs-number">1</span>; o&lt;n; ++o) &#123;<br>            <br>            s = t = <span class="hljs-number">0</span>;<br>            <br>            <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>            <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dis); <br>            <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p=<span class="hljs-number">1</span>; p&lt;=n; ++p) &#123;<br>                <br>                <span class="hljs-keyword">int</span> v = <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>                    <span class="hljs-keyword">if</span>(!flag[i] <span class="hljs-keyword">and</span> !vis[i] <span class="hljs-keyword">and</span> (v == <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> dis[v] &lt; dis[i]))<br>                        v = i;<br>                <span class="hljs-keyword">if</span>(v == <span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;<br>                <br>                vis[v] = <span class="hljs-literal">true</span>;<br>                <br>                s=t, t=v;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>                    <span class="hljs-keyword">if</span>(!flag[i] <span class="hljs-keyword">and</span> !vis[i]) <br>                        dis[i] += g[t][i];<br>            &#125;<br>            <br>            flag[t] = <span class="hljs-literal">true</span>;<br>            ans = <span class="hljs-built_in">min</span>(ans, dis[t]);<br>            <br>            <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>                <span class="hljs-keyword">if</span>(flag[i]) <span class="hljs-keyword">continue</span>;<br>                g[s][i] += g[t][i];<br>                g[i][s] += g[i][t];<br>            &#125;<br>                <br>        &#125;<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125; <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最小割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF387D</title>
      <link href="/cf387d/"/>
      <url>/cf387d/</url>
      
        <content type="html"><![CDATA[<h1 id="CF387D"><a href="#CF387D" class="headerlink" title="CF387D"></a>CF387D</h1><h2 id="题意分析"><a href="#题意分析" class="headerlink" title="题意分析"></a>题意分析</h2><p>操作最少的次数，构成有趣图，注意无重边，有向边。</p><ul><li>操作分为加边和删边。</li><li>有趣图定义<ul><li>有一个中心，满足此点有自环，且与其他结点有双向边。</li><li>除中心点外的结点，满足出度 = 入度 = 2。</li></ul></li></ul><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>1、仔细分析有趣图的定义，发现如下性质：</p><ul><li>中心的边数为 $(n-1)\times 2+1$，也就是它与其他结点要有双向边再加自己的一个自环，无重边所以构造中心点时不可能做删除操作，只能加边或不操作。</li><li>其他结点的出入度为 2，排除掉与中心点连接的双向边，其点的度一定为一进一出。</li></ul><p>2、如何判断结点的度满足一进一出。</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cf387d1.png"></p><p>图一，图二都是满足结点度一进一出。所以 $n$ 个结点需要 $n$ 条相连边（首尾）。</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cf387d2.png"></p><p>图三不满足，<b>只有两条相连边 $(e_1,e_2)$ 或者选择 $(e_1,e_3)$ 即有用边,还需要添加 $n-2$ 边有用边，同时还要减掉 1 条边，即总边数减去有用边，也就是要删除的无用边。</b></p><blockquote><p>方法1：拆点，一个点拆为进点和出点，建立二分图。</p><p>​    <img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/cf387d3.png"></p><p>左边的点求匹配，最大匹配就是有用的边。</p><p>方法2：直接将图看成二分图，利用有向边每个点都求匹配。</p></blockquote><p>3、枚举每个点做中心点。</p><ul><li><p>中心点 V，计算维护中心需要的边 $(n-1)\times 2+1-\sum{V发出的边}$</p></li><li><p>删除 V 点，也就是包含相应的边</p></li><li><p>剩下的图，计算最大匹配，满足一进一出的边数需要的操作（添加边 + 删除边）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匹配：模板</title>
      <link href="/match-template/"/>
      <url>/match-template/</url>
      
        <content type="html"><![CDATA[<h1 id="匹配：模板"><a href="#匹配：模板" class="headerlink" title="匹配：模板"></a>匹配：模板</h1><h2 id="UOJ78-二分图最大匹配（DFS-KM）"><a href="#UOJ78-二分图最大匹配（DFS-KM）" class="headerlink" title="UOJ78 二分图最大匹配（DFS - KM）"></a>UOJ78 二分图最大匹配（DFS - KM）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">550</span>;<br><br><span class="hljs-keyword">int</span> match[N], g[N][N], vis[N], link[N];<br><span class="hljs-keyword">int</span> n, m, e, tag, ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v=<span class="hljs-number">1</span>; v&lt;=m; ++v) &#123;<br>        <span class="hljs-keyword">if</span>(!g[u][v] <span class="hljs-keyword">or</span> vis[v] == tag) <span class="hljs-keyword">continue</span>;<br>        vis[v] = tag;<br>        <span class="hljs-keyword">if</span>(!match[v] <span class="hljs-keyword">or</span> dfs(match[v])) &#123;<br>            match[v] = u;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;e);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v; i&lt;=e; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        g[u][v] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        tag = i;<br>        <span class="hljs-keyword">if</span>(dfs(i)) ++ans;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) link[match[i]] = i;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, link[i]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="UOJ79-一般图最大匹配（带花树）"><a href="#UOJ79-一般图最大匹配（带花树）" class="headerlink" title="UOJ79 一般图最大匹配（带花树）"></a>UOJ79 一般图最大匹配（带花树）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">550</span>;<br><span class="hljs-keyword">int</span> fa[N], match[N], pre[N], vis[N];<br><span class="hljs-keyword">int</span> tag = <span class="hljs-number">0</span>, n, m, ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> flag[N];<br><span class="hljs-keyword">bool</span> g[N][N];<br><span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(<span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;q)</span> </span>&#123;<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; empty;<br>    swap(q, empty);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">belong</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> fa[u] == u ? u : fa[u] = belong(fa[u]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(u) &#123;<br>        <span class="hljs-keyword">int</span> v = match[pre[u]];<br>        match[u] = pre[u];<br>        match[pre[u]] = u;<br>        u = v;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    ++tag;<br>    u = belong(u);<br>    v = belong(v);<br>    <span class="hljs-keyword">while</span>(vis[u] != tag) &#123;<br>        vis[u] = tag;<br>        u = belong(pre[match[u]]);<br>        <span class="hljs-keyword">if</span>(v) swap(u, v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> u;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> root)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(belong(u) != root) &#123;<br>        pre[u] = v;<br>        v = match[u];<br>        <span class="hljs-keyword">if</span>(flag[v] == <span class="hljs-number">2</span>) &#123;<br>            q.push(v);<br>            flag[v] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(belong(u) == u) fa[u] = root;<br>        <span class="hljs-keyword">if</span>(belong(v) == v) fa[v] = root;<br>        u = pre[v];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> flag);<br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> pre);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) fa[i] = i;<br>    <br>    <span class="hljs-built_in">clear</span>(q);<br>    q.push(u);<br>    flag[u] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> v=<span class="hljs-number">1</span>; v&lt;=n; ++v) &#123;<br>            <span class="hljs-keyword">if</span>(!g[u][v]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(flag[v] == <span class="hljs-number">0</span>) &#123;<br>                pre[v] = u;<br>                <span class="hljs-keyword">if</span>(match[v] == <span class="hljs-number">0</span>) &#123;<br>                    path(v);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                q.push(match[v]);<br>                flag[v] = <span class="hljs-number">2</span>;<br>                flag[match[v]] = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span>(flag[v] == <span class="hljs-number">2</span>) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(belong(u) == belong(v)) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">int</span> root = lca(u, v);<br>                <span class="hljs-built_in">connect</span>(u, v, root);<br>                <span class="hljs-built_in">connect</span>(v, u, root);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        g[u][v] = g[v][u] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>        <span class="hljs-keyword">if</span>(match[i] == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> bfs(i)) ++ans;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, match[i]);<br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UOJ80-二分图最大权匹配（BFS-KM）"><a href="#UOJ80-二分图最大权匹配（BFS-KM）" class="headerlink" title="UOJ80 二分图最大权匹配（BFS - KM）"></a>UOJ80 二分图最大权匹配（BFS - KM）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">440</span>;<br><span class="hljs-keyword">const</span> LL INF = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><br><span class="hljs-keyword">bool</span> vis[N];<br><span class="hljs-keyword">int</span> pre[N], link[N], res[N];<br><span class="hljs-keyword">int</span> n, m, e;<br>LL g[N][N], lx[N], ly[N], d[N], ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">int</span> x, y = <span class="hljs-number">0</span>;<br>    LL min1 = INF, delta;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> pre);<br>    <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> d);<br>    link[y] = k;<br>    <br>    <span class="hljs-keyword">do</span> &#123;<br>        x = link[y], delta = INF, vis[y] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(!vis[i]) &#123;<br>                <span class="hljs-keyword">if</span>(d[i] &gt; lx[x] + ly[i] - g[x][i]) &#123;<br>                    d[i] = lx[x] + ly[i] - g[x][i];<br>                    pre[i] = y;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(delta &gt; d[i]) delta = d[i], min1 = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;=m; ++i)<br>            <span class="hljs-keyword">if</span>(vis[i]) lx[link[i]] -= delta, ly[i] += delta;<br>            <span class="hljs-keyword">else</span> d[i] -= delta;<br>        y = min1;<br>    &#125; <span class="hljs-keyword">while</span>(link[y]);<br>    <span class="hljs-keyword">while</span>(y) link[y] = link[pre[y]], y = pre[y];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;e);<br>    m = <span class="hljs-built_in">max</span>(n, m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=e; ++i) &#123;<br>        <span class="hljs-keyword">int</span> u, v; LL w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        g[u][v] = w;<br>        lx[u] = <span class="hljs-built_in">max</span>(lx[u], w);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) bfs(i);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(!g[link[i]][i]) <span class="hljs-keyword">continue</span>;<br>        ans += g[link[i]][i];<br>        res[link[i]] = i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沼</title>
      <link href="/numa/"/>
      <url>/numa/</url>
      
        <content type="html"><![CDATA[<h2 id="沼"><a href="#沼" class="headerlink" title="沼"></a>沼</h2><p>&emsp;&emsp;沼底的尽头，是一片覆压百万里的金色宫殿。大殿的外墙上，布满了交通错落的铭文，似是在昭示着什么。</p><p>&emsp;&emsp;一天，一个女孩闯入了这里。一阵和煦的金光顿时笼罩了她；俄而散去，四下无痕。</p><p>&emsp;&emsp;没过了几个小时，又进来了一个男孩，像是在呼唤着什么，——。金光一如既往地扩散开来； 一道道刻痕爆裂而开，流转着金黄的光珠，跳动着淡蓝的光焰——</p><p>&emsp;&emsp;但一切终又重归了平静。唯一不同的是男孩进入的那座殿堂，蒙上了雪一般的白色，白得灼痛了双眼——</p><p>&emsp;&emsp;殿中央，一个男孩旁边躺着一个女孩。在渐渐模糊的视野里，他们站起了身，向沼底的深处走去。突然地，一座一座的宫殿轰然倒下，杳然无踪，连瓦砾都浸没在夕阳里。</p><hr><p>&emsp;&emsp;他们的面前是一片水原。             </p><p>&emsp;&emsp;“没有再向前的路了呢，”男孩道。 </p><p>&emsp;&emsp;“那⋯⋯要不就在这里？”女孩问道。</p><p>&emsp;&emsp;男孩没有回答。空无一物的海面上，反射着太阳的光辉。</p><p>&emsp;&emsp;“这里⋯⋯没有我能回去的地方了。” </p><p>&emsp;&emsp;女孩的心微微一颤。</p><p>&emsp;&emsp;黑云压了下来。男孩看向她的眼睛；在那双湛蓝的天空里，像是有两束晶莹的泪在燃烧。</p><p>&emsp;&emsp;“你回去吧，”男孩在岸边坐下。冰冷的寂静刺穿了黑暗。“你还有更重要的东西。” </p><p>&emsp;&emsp;“——那你呢？”</p><p>&emsp;&emsp;“我？……雨女无瓜。”</p><p>&emsp;&emsp;女孩再次担忧地看了他一眼，转过身去。五彩斑斓的黑洇染了苍穹，等男孩回过神来，已是孤身一人。</p><p>&emsp;&emsp;他向前迈了一步。一座巨浪打在他脚下，险些将他卷为齑粉。要是她还在这里的话，说不定已经被撕碎了呢，他想。</p><p>&emsp;&emsp;他轻轻咬了咬唇，刚挤出的笑容粉碎在脸上。他自知最多也就能到这里了，还是回去为好。</p><p>&emsp;&emsp;他拾起石子掷向水中；石子弹跳着沉了下去。</p><p>&emsp;&emsp;黑夜却还不急着到来。太阳迸发出血红的光芒，向西方吃力地转动着。</p><hr><p>&emsp;&emsp;男孩在水底见到了他的朋友。一只巨大的鲲。</p><p>&emsp;&emsp;“还要在这里待多久？”男孩试探着问道。</p><p>&emsp;&emsp;“多久？”鲲摇了摇尾巴，“我不知道。”</p><p>&emsp;&emsp;“……真的没打算离开嘛？”</p><p>&emsp;&emsp;“离开？离开幹什么？”鲲又摇了摇尾巴，脸上露出奇异的神色来。男孩平静地看向他。</p><p>&emsp;&emsp;“——没事了。”</p><p>&emsp;&emsp;男孩侧过头去，脸上始终没有浮现过可以称之为表情的东西。四下的水雾扩散开来，像狰狞的水母的触手一样，箍紧了沼底的天空。</p><p>&emsp;&emsp;自非亭午夜分，不见曦月。</p><hr><p>&emsp;&emsp;女孩坐在大殿的中央，看着周遭的残壁在烈火中熔释。火光给她的脸染成了金色；凤凰在她的脑畔上盘旋，就像穿行在无边的旷野，有着挣脱一切的力量。</p><hr><p>&emsp;&emsp; “如何？”她问道。</p><p>&emsp;&emsp;“还好吧，”他没有抬头，“就是还得再适应一点时间。需要重铸的事情太多了。”</p><p>&emsp;&emsp;“或许吧，”她附和道。</p><p>&emsp;&emsp;远处的蝉叫了起来。</p><p>&emsp;&emsp;男孩和她都在等待着什么。她的目光望向窗外：雪花从天中飘落，给葱茏的树叶抹上了一层白霜。</p><p>&emsp;&emsp;“抱歉了。” </p><p>&emsp;&emsp;男孩点了点头。</p><p>&emsp;&emsp; “⋯⋯去哪儿？” 男孩的声音微颤了一下。</p><p>&emsp;&emsp;她的瞳孔一缩。<b>若是重开一次，</b>她想，<b>这些话本不应该被说出来的。</b>她会不会……</p><p>&emsp;&emsp;“所以你是怎么知道的呢？”她定定地望向他。</p><p>&emsp;&emsp;四面的风静了下来。</p><hr><p>&emsp;&emsp;女孩回到了水原——or she expected so。一团团死掉的水嘶叫着从湖底的罅隙里鱼贯而出，取而代之的，是一条条岩浆的河；大地像饼干一样脆生生地从中间裂开，散落出无数如粉如沙的碎片，点缀在覆压百万里的橘红的海洋中，就像一口沸腾的锅，把晚霞也煮成了一般颜色。</p><p>&emsp;&emsp;她回过头：来时的路早已淹没在了递归的沼泽里。</p><p>&emsp;&emsp;女孩迟疑了一下，随即向着东方走去。月亮追赶着太阳，终于将它逼到了地平线下。</p><p>&emsp;&emsp;她一次也没有回头。</p><hr><div class="note success">            <p>未完待续</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流：模板</title>
      <link href="/network-flow-template/"/>
      <url>/network-flow-template/</url>
      
        <content type="html"><![CDATA[<h1 id="网络流：模板"><a href="#网络流：模板" class="headerlink" title="网络流：模板"></a>网络流：模板</h1><h2 id="P3376-网络最大流（Dinic）"><a href="#P3376-网络最大流（Dinic）" class="headerlink" title="P3376 网络最大流（Dinic）"></a>P3376 网络最大流（Dinic）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">11000</span>, M = <span class="hljs-number">110000</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, next;<br>&#125; e[M &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> cur[N], h[N], tot;<br><span class="hljs-keyword">int</span> dfn[N], ans, n, m, s, t;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[tot] = node(&#123;u, v, w, h[u]&#125;);<br>    cur[u] = h[u] = tot++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dfn, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> dfn);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    dfn[s] = <span class="hljs-number">1</span>;<br>    q.push(s);<br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> !dfn[v]) &#123;<br>                dfn[v] = dfn[u] + <span class="hljs-number">1</span>;<br>                q.push(v);<br>                <span class="hljs-keyword">if</span>(v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> low)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(u == t) <span class="hljs-keyword">return</span> low;<br>    <span class="hljs-keyword">int</span> w = low;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>        <span class="hljs-keyword">int</span> v = e[i].v;<br>        cur[u] = i;<br>        <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> dfn[v] == dfn[u] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> f = dfs(v, <span class="hljs-built_in">min</span>(w, e[i].w));<br>            e[i].w -= f; e[i^<span class="hljs-number">1</span>].w += f;<br>            w -= f;<br>            <span class="hljs-keyword">if</span>(!w) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low - w;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(bfs()) &#123;<br>        <span class="hljs-built_in">memcpy</span>(cur, h, <span class="hljs-keyword">sizeof</span> cur);<br>        ans += dfs(s, INF);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, w; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);<br>        add(u, v, w);<br>        add(v, u, <span class="hljs-number">0</span>);<br>    &#125;<br>    dinic();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P3381-最小费用最大流（单路增广）"><a href="#P3381-最小费用最大流（单路增广）" class="headerlink" title="P3381 最小费用最大流（单路增广）"></a>P3381 最小费用最大流（单路增广）</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> il inline</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5500</span>, M = <span class="hljs-number">55000</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, val;<br>    <span class="hljs-built_in">point</span>(<span class="hljs-keyword">int</span> _u = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> _val = <span class="hljs-number">0</span>): u(_u), val(_val) &#123;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> <span class="hljs-built_in">point</span> &amp;o) <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> val &gt; o.val; &#125; <br>&#125;;<br><br><span class="hljs-built_in">priority_queue</span> &lt;<span class="hljs-built_in">point</span>&gt; q;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, f, next;<br>    node() &#123;&#125;<br>&#125; e[M &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> head[N], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> f)</span> </span>&#123;<br>    e[tot].u = u, e[tot].v = v, e[tot].w = w, e[tot].f = f;<br>    e[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> h[N], dis[N], flow[N], pre[N];<br><br><span class="hljs-keyword">int</span> n, m, s, t;<br><br><span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>, mincost = <span class="hljs-number">0</span>;<br><span class="hljs-function">il <span class="hljs-keyword">bool</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> flow);<br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> pre);<br>    <br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(<span class="hljs-built_in">point</span>(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.top().u, val = q.top().val;<br>        q.pop();<br>        <span class="hljs-keyword">if</span> (val &gt; dis[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span> (e[i].w <span class="hljs-keyword">and</span> dis[v] &gt; dis[u] + e[i].f + h[u] - h[v]) &#123;<br>                pre[v] = i;<br>                flow[v] = <span class="hljs-built_in">min</span>(flow[u], e[i].w);<br>                dis[v] = dis[u] + e[i].f + h[u] - h[v];<br>                q.push(<span class="hljs-built_in">point</span>(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[t] != INF;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = pre[t]; p != <span class="hljs-number">-1</span>; p = pre[e[p].u]) &#123;<br>        e[p].w -= flow[t];<br>        e[p^<span class="hljs-number">1</span>].w += flow[t];<br>    &#125;<br>    maxflow += flow[t];<br>    mincost += (dis[t] - h[s] + h[t]) * flow[t];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) h[i] += dis[i];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, w, f; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w, &amp;f);<br>        add(u, v, w, f);<br>        add(v, u, <span class="hljs-number">0</span>, -f);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (dijkstra()) check();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, maxflow, mincost);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5500</span>, M = <span class="hljs-number">110000</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, f, next;<br>&#125; e[M];<br><span class="hljs-keyword">int</span> h[N], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> f)</span> </span>&#123;<br>    e[tot] = &#123;u, v, w, f, h[u]&#125;;<br>    h[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> pre[N], flow[N], dis[N];<br><span class="hljs-keyword">bool</span> vis[N];<br><br><span class="hljs-keyword">int</span> n, m, s, t, maxflow, mincost;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> pre);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> flow);<br>    <br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> dis[v] &gt; dis[u] + e[i].f) &#123;<br>                dis[v] = dis[u] + e[i].f;<br>                pre[v] = i;<br>                flow[v] = <span class="hljs-built_in">min</span>(flow[u], e[i].w);<br>                <span class="hljs-keyword">if</span>(!vis[v]) &#123;<br>                    q.push(v);<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> dis[t] != INF;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> p = pre[t]; p != <span class="hljs-number">-1</span>; p = pre[e[p].u]) &#123;<br>        e[p].w -= flow[t];<br>        e[p^<span class="hljs-number">1</span>].w += flow[t];<br>    &#125;<br>    <br>    mincost += dis[t] * flow[t];<br>    maxflow += flow[t];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h); <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, w, f; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w, &amp;f);<br>        add(u, v, w, f);<br>        add(v, u, <span class="hljs-number">0</span>, -f);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(spfa()) check();<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, maxflow, mincost);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LOJ115-无源汇有上下界可行流（超级源汇）"><a href="#LOJ115-无源汇有上下界可行流（超级源汇）" class="headerlink" title="LOJ115 无源汇有上下界可行流（超级源汇）"></a>LOJ115 无源汇有上下界可行流（超级源汇）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> il inline</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">220</span>, M = <span class="hljs-number">11000</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, next;<br>&#125; e[M * <span class="hljs-number">6</span>];<br><br><span class="hljs-keyword">int</span> head[N], cur[N], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[tot] = (node) &#123;u, v, w, head[u]&#125;;<br>    head[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> h[N], n, m, ss, tt;<br><span class="hljs-function">il <span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">//分层 </span><br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> cur);<br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(ss);<br>    h[ss] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> !h[v]) &#123;<br>                h[v] = h[u] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(v == tt) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.push(v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> low)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(u == tt) <span class="hljs-keyword">return</span> low;<br>    <span class="hljs-keyword">int</span> w = low;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u]; i != <span class="hljs-number">-1</span>; i = e[i].next, cur[u] = i) &#123;<br>        <span class="hljs-keyword">int</span> v = e[i].v;<br>        <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> h[v] == h[u] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> f = dfs(v, <span class="hljs-built_in">min</span>(w, e[i].w));<br>            e[i].w -= f;<br>            e[i^<span class="hljs-number">1</span>].w += f;<br>            w -= f;<br>            <span class="hljs-keyword">if</span>(!w) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low - w;<br>&#125;<br><br><span class="hljs-keyword">int</span> tflow = <span class="hljs-number">0</span>, sflow = <span class="hljs-number">0</span>;<br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">dinic</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[ss]; i != <span class="hljs-number">-1</span>; i = e[i].next)<br>        sflow += e[i].w; <span class="hljs-comment">//出流量 </span><br>        <br>    <span class="hljs-keyword">while</span>(bfs()) dfs(ss, INF);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tt]; i != <span class="hljs-number">-1</span>; i = e[i].next) <br>        tflow += e[i].w; <span class="hljs-comment">//入流量 </span><br>    <br>    <span class="hljs-keyword">if</span>(sflow == tflow) &#123; <span class="hljs-comment">//满流 </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;tot; i+=<span class="hljs-number">6</span>) <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, e[i+<span class="hljs-number">1</span>].w + e[i+<span class="hljs-number">5</span>].w); <span class="hljs-comment">//反边流量和 </span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;loj115.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    ss = <span class="hljs-number">0</span>, tt = n+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, l, h; i&lt;=m; ++i) &#123; <span class="hljs-comment">//建图 </span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;l, &amp;h);<br>        add(u, tt, l);<br>        add(tt, u, <span class="hljs-number">0</span>);<br>        add(ss, v, l);<br>        add(v, ss, <span class="hljs-number">0</span>);<br>        add(u, v, h-l);<br>        add(v, u, <span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    dinic();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="有源汇有上下界（转无源汇，然后断边）"><a href="#有源汇有上下界（转无源汇，然后断边）" class="headerlink" title="有源汇有上下界（转无源汇，然后断边）"></a>有源汇有上下界（转无源汇，然后断边）</h2><h3 id="最大流（顺流增广）"><a href="#最大流（顺流增广）" class="headerlink" title="最大流（顺流增广）"></a>最大流（顺流增广）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">220</span>, M = <span class="hljs-number">22000</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, next;<br>&#125; e[M];<br><span class="hljs-keyword">int</span> head[N], cur[N], tot = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[tot] = (node) &#123;u, v, w, head[u]&#125;;<br>    head[u] = tot++;<br>    e[tot] = (node) &#123;v, u, <span class="hljs-number">0</span>, head[v]&#125;;<br>    head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> h[N], in[N], n, m, s, t, ss, tt, sflow = <span class="hljs-number">0</span>, tflow = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> cur);<br>    <br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    h[s] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u], v; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> !h[v]) &#123;<br>                h[v] = h[u] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.push(v); <br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(u == t) <span class="hljs-keyword">return</span> low;<br>    <br>    <span class="hljs-keyword">int</span> w = low;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u], v; i != <span class="hljs-number">-1</span>; i = e[i].next, cur[u] = i) &#123;<br>        v = e[i].v;<br>        <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> h[v] == h[u] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> f = dfs(v, <span class="hljs-built_in">min</span>(w, e[i].w), t);<br>            e[i].w -= f;<br>            e[i^<span class="hljs-number">1</span>].w += f;<br>            w -= f;<br>            <span class="hljs-keyword">if</span>(!w) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low - w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//freopen(&quot;loj116.in&quot;, &quot;r&quot;, stdin);</span><br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <br>    ss = <span class="hljs-number">0</span>, tt = n+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, l, h; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;l, &amp;h);<br>        in[u] -= l; in[v] += l;<br>        add(u, v, h-l);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(!in[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            sflow += in[i];<br>            add(ss, i, in[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            add(i, tt, -in[i]);<br>        &#125;<br>    &#125;<br>    <br>    add(t, s, INF);<br>    <br>    <span class="hljs-keyword">while</span>(bfs(ss, tt)) tflow += dfs(ss, INF, tt);<br>    <br>    <span class="hljs-keyword">if</span>(sflow != tflow) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please go home to sleep\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[ss]; i != <span class="hljs-number">-1</span>; i = e[i].next) <br>        e[i].w = e[i^<span class="hljs-number">1</span>].w = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tt]; i != <span class="hljs-number">-1</span>; i = e[i].next)<br>        e[i].w = e[i^<span class="hljs-number">1</span>].w = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">int</span> sum = e[--tot].w;<br>    e[tot<span class="hljs-number">-1</span>].w = e[tot].w = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(bfs(s, t)) sum += dfs(s, INF, t);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum);<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小流（逆流增广）"><a href="#最小流（逆流增广）" class="headerlink" title="最小流（逆流增广）"></a>最小流（逆流增广）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">220</span>, M = <span class="hljs-number">22000</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, next;<br>&#125; e[M];<br><span class="hljs-keyword">int</span> head[N], cur[N], tot = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w)</span> </span>&#123;<br>    e[tot] = (node) &#123;u, v, w, head[u]&#125;;<br>    head[u] = tot++;<br>    e[tot] = (node) &#123;v, u, <span class="hljs-number">0</span>, head[v]&#125;;<br>    head[v] = tot++;<br>&#125;<br><span class="hljs-keyword">int</span> h[N], in[N], n, m, s, t, ss, tt, sflow = <span class="hljs-number">0</span>, tflow = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> h);<br>    <span class="hljs-built_in">memcpy</span>(cur, head, <span class="hljs-keyword">sizeof</span> cur);<br>    <br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br>    q.push(s);<br>    h[s] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[u], v; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> !h[v]) &#123;<br>                h[v] = h[u] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(v == t) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                q.push(v); <br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(u == t) <span class="hljs-keyword">return</span> low;<br>    <br>    <span class="hljs-keyword">int</span> w = low;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = cur[u], v; i != <span class="hljs-number">-1</span>; i = e[i].next, cur[u] = i) &#123;<br>        v = e[i].v;<br>        <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> h[v] == h[u] + <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> f = dfs(v, <span class="hljs-built_in">min</span>(w, e[i].w), t);<br>            e[i].w -= f;<br>            e[i^<span class="hljs-number">1</span>].w += f;<br>            w -= f;<br>            <span class="hljs-keyword">if</span>(!w) <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> low - w;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//freopen(&quot;loj116.in&quot;, &quot;r&quot;, stdin);</span><br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <br>    ss = <span class="hljs-number">0</span>, tt = n+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, l, h; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;l, &amp;h);<br>        in[u] -= l; in[v] += l;<br>        add(u, v, h-l);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(!in[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(in[i] &gt; <span class="hljs-number">0</span>) &#123;<br>            sflow += in[i];<br>            add(ss, i, in[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            add(i, tt, -in[i]);<br>        &#125;<br>    &#125;<br>    <br>    add(t, s, INF);<br>    <br>    <span class="hljs-keyword">while</span>(bfs(ss, tt)) tflow += dfs(ss, INF, tt);<br>    <br>    <span class="hljs-keyword">if</span>(sflow != tflow) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;please go home to sleep\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[ss]; i != <span class="hljs-number">-1</span>; i = e[i].next) <br>        e[i].w = e[i^<span class="hljs-number">1</span>].w = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = head[tt]; i != <span class="hljs-number">-1</span>; i = e[i].next)<br>        e[i].w = e[i^<span class="hljs-number">1</span>].w = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">int</span> sum = e[--tot].w;<br>    e[tot<span class="hljs-number">-1</span>].w = e[tot].w = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(bfs(s, t)) sum += dfs(s, INF, t);<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum);<br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流：Dijkstra 求费用流</title>
      <link href="/network-flow-dijkstra/"/>
      <url>/network-flow-dijkstra/</url>
      
        <content type="html"><![CDATA[<h1 id="网络流：Dijkstra-求费用流"><a href="#网络流：Dijkstra-求费用流" class="headerlink" title="网络流：Dijkstra 求费用流"></a>网络流：Dijkstra 求费用流</h1><p><strong>注：下文中的边权 $w$ 均表示费用 $f$。</strong></p><p>Dijkstra 不能求有负权边的最短路，所以我们可以对网络 $G$ 中的每一个点设置一个势函数 $h(u)$，以满足在与原图等价的新图中的边权非负。</p><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>在任意残留网络中的任意边 $(u,v)$ 都需要满足：<br>$$<br>w_{u, v}+h(u) - h(v)≥0<br>$$<br>令图 $G$ 的等价图为 $G’$，其对应的边 $(u,v)$ 的权值为<br>$$<br>w’<em>{u,v} = w</em>{u,v} + h(u) - h(v)<br>$$<br>因此，对于原图中的任意一条路径 $(u_1,u_2,\dots,u_k)$，它在 $G$ 中的权值为<br>$$<br>w_{u_1,u_2}+w_{u_2,u_3}+\dots+w_{u_{k-1},u_k}<br>$$<br>在 $G’$ 中的权值可化简为<br>$$<br>w_{u_1,u_2} + w_{u_2,u_3} + \dots + w_{u_{k-1}, u_k} + h(u_1)-h(u_k)<br>$$<br><strong>所以，在 $G’$ 求出的路径都可以对应到 $G$ 上。</strong></p><p>令 $d_{u}$ 为图 $G$ 中源点 $s$ 到点 $u$ 的最短路径，图 $G’$ 中为 $d’_{u}$，显然有</p><p>$$<br>d_{u,v} = d’_{u,v}-h(u)+h(v)<br>$$<br>所以我们只需要求 $G’$ 的最短路径，就能对应回原图的最短路径。</p><h2 id="势函数"><a href="#势函数" class="headerlink" title="势函数"></a>势函数</h2><h3 id="初值"><a href="#初值" class="headerlink" title="初值"></a>初值</h3><p>如果网络 $G$ 初始边权非负，则令 $h(u)=0$ ，否则可令 $h(u) = dis[u]$（用 SPFA 解决）。</p><p>证明略。</p><h3 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h3><p>每次增广后，令 $h(u)=h(u)+dis[u]$ 即可。</p><p>证明：对于残余网络上的任意边 $(u,v)$，均有<br>$$<br>dis[u]+w_{u,v}+h(u)-h(v)≥dis[v]<br>$$<br>移项，得<br>$$<br>w_{u,v}+(h(u)+dis[u])-(h(v)+dis[v]) \geq 0<br>$$<br>证毕。</p><h2 id="P3381-［模板］最小费用最大流"><a href="#P3381-［模板］最小费用最大流" class="headerlink" title="P3381 ［模板］最小费用最大流"></a>P3381 ［模板］最小费用最大流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> il inline</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">5500</span>, M = <span class="hljs-number">55000</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">point</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, val;<br>    <span class="hljs-built_in">point</span>(<span class="hljs-keyword">int</span> _u = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> _val = <span class="hljs-number">0</span>): u(_u), val(_val) &#123;&#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-keyword">const</span> <span class="hljs-built_in">point</span> &amp;o) <span class="hljs-keyword">const</span> &#123; <span class="hljs-keyword">return</span> val &gt; o.val; &#125; <br>&#125;;<br><br><span class="hljs-built_in">priority_queue</span> &lt;<span class="hljs-built_in">point</span>&gt; q;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, f, next;<br>    node() &#123;&#125;<br>&#125; e[M &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> head[N], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> f)</span> </span>&#123;<br>    e[tot].u = u, e[tot].v = v, e[tot].w = w, e[tot].f = f;<br>    e[tot].next = head[u]; head[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> h[N], dis[N], flow[N], pre[N];<br><br><span class="hljs-keyword">int</span> n, m, s, t;<br><br><span class="hljs-keyword">int</span> maxflow = <span class="hljs-number">0</span>, mincost = <span class="hljs-number">0</span>;<br><span class="hljs-function">il <span class="hljs-keyword">bool</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <span class="hljs-built_in">memset</span>(flow, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> flow);<br>    <span class="hljs-built_in">memset</span>(pre, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> pre);<br>    <br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.push(<span class="hljs-built_in">point</span>(s, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">while</span> (!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.top().u, val = q.top().val;<br>        q.pop();<br>        <span class="hljs-keyword">if</span> (val &gt; dis[u]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span> (e[i].w <span class="hljs-keyword">and</span> dis[v] &gt; dis[u] + e[i].f + h[u] - h[v]) &#123;<br>                pre[v] = i;<br>                flow[v] = <span class="hljs-built_in">min</span>(flow[u], e[i].w);<br>                dis[v] = dis[u] + e[i].f + h[u] - h[v];<br>                q.push(<span class="hljs-built_in">point</span>(v, dis[v]));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dis[t] != INF;<br>&#125;<br><br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> p = pre[t]; p != <span class="hljs-number">-1</span>; p = pre[e[p].u]) &#123;<br>        e[p].w -= flow[t];<br>        e[p^<span class="hljs-number">1</span>].w += flow[t];<br>    &#125;<br>    maxflow += flow[t];<br>    mincost += (dis[t] - h[s] + h[t]) * flow[t];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) h[i] += dis[i];<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;p3381.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> head);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;t);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, u, v, w, f; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w, &amp;f);<br>        add(u, v, w, f);<br>        add(v, u, <span class="hljs-number">0</span>, -f);<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span> (dijkstra()) check();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, maxflow, mincost);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流：消圈算法</title>
      <link href="/network-flow-deloop/"/>
      <url>/network-flow-deloop/</url>
      
        <content type="html"><![CDATA[<h1 id="网络流：消圈算法"><a href="#网络流：消圈算法" class="headerlink" title="网络流：消圈算法"></a>网络流：消圈算法</h1><p><strong>注：下文中的权均表示费用。</strong></p><h2 id="消圈定理"><a href="#消圈定理" class="headerlink" title="消圈定理"></a>消圈定理</h2><p>在某个流 $f$ 中，如果其残余网络中没有负圈（剩余流量为 $0$ 的边视为不存在），那它一定是当前流量下的最小费用，<strong>否则一定不是。</strong></p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>假设一个网络，所有边的容量都是 $1$。</p><p><img src="https://blog.sengxian.com/images/clearcircle/p1.png" alt="img"></p><p>如果流量走上路的话，其残余网络（黑箭头）变为：</p><p><img src="https://blog.sengxian.com/images/clearcircle/p2.png" alt="img"></p><p>因为上路的边的流量占满了，所以现在上路只有反边。</p><p>显然 $A \rightarrow C \rightarrow t \rightarrow B \rightarrow A$ 为负圈，沿此负圈增广（每条边的流量＋1），环上每个点的入流量仍然等于出流量（原流为可行流）。</p><p>流量在圈中增广，总的流量既没有增加，也没有减少，只不过是流量从费用更少的地方流过 （$A \rightarrow C \rightarrow t$），从费用大的地方退流而已（$t \rightarrow B \rightarrow A$），流过的流量和退掉的流量是相等的，<b>实质上只是将从 $A$ 流出的流量的方向改变，使得费用更小。</b></p><p>网络流的反边给了我们一个很好的反悔机制，使得我们可以对任意一个流 $f$，通过消负圈（可能不止一个），来得到它当前流量下的最小费用流。</p><p><img src="https://blog.sengxian.com/images/clearcircle/p3.png" alt="img"></p><p>可以看到，沿着负圈增广之后，已经没有负圈存在了，已经达到了当前流量下的最小费用流（也就是最小费用最大流）。所以只要有负圈，就可以增广达到更小费用。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>求最小费用最大流时，可以先跑出一条可行最大流，然后通过不断消圈调整出最小费用。</p><p>更广泛用于残余网络寻找更优解。</p><h2 id="POJ2175-Evacuation-Plan"><a href="#POJ2175-Evacuation-Plan" class="headerlink" title="POJ2175 Evacuation Plan"></a>POJ2175 Evacuation Plan</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>原题面很长。</p><p>给出已达到最大流的残余网络，求出其是否已达到最小费用，如果未达到则找出更优方案。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>消圈模板，建出网络后利用 SPFA，如果一个节点被更新了 $n$ 次则说明图中一定存在负环。题目中没有说必须是最优解，因此只要将负圈上的流量调整 $1$ 即可。</p><p><b>注意一个节点被更新 $n$ 次不代表其一定在负权圈内。</b>正确做法是从这个节点 $v$ 开始不断捯它的前驱，如果发现某个节点 $u$ 被访问了两遍，则说明 $u$ 一定在负权圈内，再根据 $u$ 去捯前驱调整负权圈。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>下图中某些边费用有误，因此该图不能推出正解，仅用作示意图。</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/2poj2175%E6%AE%8B%E7%95%99%E5%9B%BE0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/3poj2175%E6%AE%8B%E7%95%99%E5%9B%BE1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/4poj2175%E6%AE%8B%E7%95%99%E5%9B%BE2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/5poj2175%E8%B4%9F%E6%9D%83%E5%9C%88%E6%B5%81%E9%87%8F.png"></p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/6poj2175%E6%B1%82%E8%B4%9F%E6%9D%83%E5%9C%88.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> il inline</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function">il T <span class="hljs-title">abs</span><span class="hljs-params">(T x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">0</span> ? x : -x; &#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110</span>, M = N * N &lt;&lt; <span class="hljs-number">1</span>, INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">coor</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, y, z;<br>&#125; a[N], b[N];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, w, f, next;<br>&#125; e[M];<br><span class="hljs-keyword">int</span> h[N &lt;&lt; <span class="hljs-number">1</span>], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">bool</span> vis[N &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-keyword">int</span> n, m, s, t;<br><span class="hljs-keyword">int</span> cnt[N &lt;&lt; <span class="hljs-number">1</span>], pre[N &lt;&lt; <span class="hljs-number">1</span>];<br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> w, <span class="hljs-keyword">int</span> f)</span> </span>&#123;<br>    e[tot] = (node) &#123;u, v, w, f, h[u]&#125;;<br>    h[u] = tot++;<br>&#125;<br><br><span class="hljs-keyword">int</span> bp[N][N], dis[N &lt;&lt; <span class="hljs-number">1</span>], p[N][N], occ[N];<br><br><span class="hljs-built_in">deque</span>&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-keyword">bool</span> cyc[N &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function">il <span class="hljs-keyword">void</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">do</span> &#123;<br>        cyc[v] = <span class="hljs-literal">true</span>;<br>        v = e[pre[v]].u;<br>    &#125; <span class="hljs-keyword">while</span>(!cyc[v]);<br>    <br>    <span class="hljs-keyword">int</span> u = v;<br>    <span class="hljs-keyword">do</span> &#123;<br>        --e[pre[v]].w;<br>        ++e[pre[v]^<span class="hljs-number">1</span>].w;<br>        v = e[pre[v]].u;<br>    &#125; <span class="hljs-keyword">while</span>(u != v);<br>                        <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = h[n+i]; j != <span class="hljs-number">-1</span>; j = e[j].next) <br>            <span class="hljs-keyword">if</span>(e[j].v != t) bp[e[j].v][i] = e[j].w;<br>                                <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SUBOPTIMAL\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, bp[i][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a[i].x, &amp;a[i].y, &amp;a[i].z);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;b[i].x, &amp;b[i].y, &amp;b[i].z);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i][j]),<br>            occ[j] += p[i][j];<br>    <br>    <span class="hljs-built_in">memset</span>(h, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> h);<br>    s = <span class="hljs-number">0</span>, t = n+m+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        add(s, i, a[i].z, <span class="hljs-number">0</span>);<br>        add(i, s, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j) &#123;<br>            <span class="hljs-keyword">int</span> f = <span class="hljs-built_in">abs</span>(a[i].x - b[j].x) + <span class="hljs-built_in">abs</span>(a[i].y - b[j].y) + <span class="hljs-number">1</span>;<br>            add(i, n+j, INF, f);<br>            add(n+j, i, p[i][j], -f);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) &#123;<br>        add(n+i, t, b[i].z - occ[i], <span class="hljs-number">0</span>);<br>        add(t, n+i, occ[i], <span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    <br>    q.push_front(s);<br>    vis[s] = <span class="hljs-literal">true</span>;<br>    ++cnt[s];<br>    dis[s] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(!q.empty()) &#123;<br>        <span class="hljs-keyword">int</span> u = q.front();<br>        q.pop_front();<br>        vis[u] = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; i != <span class="hljs-number">-1</span>; i = e[i].next) &#123;<br>            <span class="hljs-keyword">int</span> v = e[i].v;<br>            <span class="hljs-keyword">if</span>(e[i].w <span class="hljs-keyword">and</span> dis[v] &gt; dis[u] + e[i].f) &#123;<br>                pre[v] = i;<br>                dis[v] = dis[u] + e[i].f;<br>                <span class="hljs-keyword">if</span>(!vis[v]) &#123;<br>                    <span class="hljs-keyword">if</span>(!q.empty() <span class="hljs-keyword">and</span> dis[v] &gt;= dis[q.front()]) q.push_back(v);<br>                    <span class="hljs-keyword">else</span> q.push_front(v);<br>                    vis[v] = <span class="hljs-literal">true</span>;<br>                    ++cnt[v];<br>                    <span class="hljs-keyword">if</span>(cnt[v] == t+<span class="hljs-number">1</span>) &#123;<br>                        check(v);<br>                        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OPTIMAL\n&quot;</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>算法证明中的图片引自 <a href="https://blog.sengxian.com/algorithms/clearcircle">Sengxian’s Blog</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陌上</title>
      <link href="/mo-shang/"/>
      <url>/mo-shang/</url>
      
        <content type="html"><![CDATA[<h2 id="陌上"><a href="#陌上" class="headerlink" title="陌上"></a>陌上</h2><div class="note default">            <p>多少次咫尺之隔的希望</p><p>却终是目送着的离开</p>          </div><p>&emsp;&emsp;__最美好的时候__（）</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;？</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;多少次经意又不经意</p><p>&emsp;&emsp;&emsp;&emsp;自然而又矫情</p><p>&emsp;&emsp;踌躇在触手可及的门口</p><p>&emsp;&emsp;&emsp;&emsp;隔的是无限的冰凌</p><p>&emsp;&emsp;缓慢而痛彻心扉</p><p>&emsp;&emsp;&emsp;&emsp;冷漠而撕心裂肺</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;就算你冷若冰霜</p><p>&emsp;&emsp;&emsp;&emsp;就算残存的桥被时间的流冲淡</p><p>&emsp;&emsp;&emsp;&emsp;就算寒冰封冻了每一处角落</p><p>&emsp;&emsp;水雾浸湿了他的眼</p><p>&emsp;&emsp;&emsp;&emsp;留下往生不灭的洇痕</p><p>&emsp;&emsp;我</p><p>&emsp;&emsp;&emsp;&emsp;命不由天</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;就算悸动的心被死寂的水销毁</p><p>&emsp;&emsp;&emsp;&emsp;就算迟来的阳光等不到花开的日子</p><p>&emsp;&emsp;&emsp;&emsp;就算此时相望不相闻    </p><p>&emsp;&emsp;溱与洧</p><p>&emsp;&emsp;&emsp;&emsp;方涣涣兮</p><p>&emsp;&emsp;明天</p><p>&emsp;&emsp;&emsp;&emsp;</p><p>&emsp;&emsp;愿往来翕忽的鱼儿</p><p>&emsp;&emsp;&emsp;&emsp;离开涸辙的田野</p><p>&emsp;&emsp;愿熙熙攘攘的行人</p><p>&emsp;&emsp;&emsp;&emsp;离开郁孤台的障翳</p><p>&emsp;&emsp;愿逐月华</p><p>&emsp;&emsp;&emsp;&emsp;流照君</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;纵使过往的种种想要钦定了未来</p><p>&emsp;&emsp;&emsp;&emsp;纵使层迭的细沙似已磨灭了你我</p><p>&emsp;&emsp;（不甘、仗剑、人）</p><p>&emsp;&emsp;斩的</p><p>&emsp;&emsp;&emsp;&emsp;就是命运</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;纵使真的到达了最黑暗的时刻</p><p>&emsp;&emsp;&emsp;&emsp;纵使远方的洪流咆哮着向着未来</p><p>&emsp;&emsp;&emsp;&emsp;纵使湛蓝的天空里爱恨交盏</p><p>&emsp;&emsp;&emsp;&emsp;纵使</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;山无棱</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;如果再相遇</p><p>&emsp;&emsp;我想</p><p>&emsp;&emsp;&emsp;&emsp;陪你一起&emsp;飞过彷徨</p><p>&emsp;&emsp;&emsp;&emsp;看最初的一道光</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;凤凰于飞&emsp;覆照殷红</p><p>&emsp;&emsp;夕阳</p>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
          <category> 陌上 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尺取法</title>
      <link href="/ruler-method/"/>
      <url>/ruler-method/</url>
      
        <content type="html"><![CDATA[<h1 id="尺取法"><a href="#尺取法" class="headerlink" title="尺取法"></a>尺取法</h1><p><strong>与单调队列相关</strong></p><p>要求在满足条件的情况下，长度越长，答案越好（下简称具有单调性）.</p><p>利用双指针 $l,r$ 及队列思想，对于同一个 $l$ 让 $r$ 尽可能延伸至最远，得到一个答案区间，$r$ 已到达最远后将与 $l$ 有关的信息弹出，对于多个答案区间找出最优解．</p><h2 id="HDU5178-Pairs"><a href="#HDU5178-Pairs" class="headerlink" title="HDU5178 Pairs"></a>HDU5178 Pairs</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>有 $n$ 个值 $x_1, x_2, \dots,x_n$，求使得 $|x_b-x_a|\leqslant k,a&lt;b$ 的数对 $(a,b)$ 的个数．</p><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><p>分析可知 $a&lt;b$ 这一条件只是确保无重复，次序其实对于最终答案没有影响．</p><p>考虑先对 $x$ 排序（因原题目有绝对值，无影响），for​ $l$ 尺取出最远的 $r$， 则 $(l,r]$  间的每个数均与 $l$ 构成合法数对．</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110000</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br><span class="hljs-keyword">int</span> T, n;<br>LL k, x[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     <br>    freopen(<span class="hljs-string">&quot;hdu5178.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>     <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>     <br>    <span class="hljs-keyword">while</span>(T--) &#123;<br>          <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lld&quot;</span>, &amp;n, &amp;k);<br>          <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, x+i);<br>          <br>        <span class="hljs-built_in">std</span>::sort(x+<span class="hljs-number">1</span>, x+n+<span class="hljs-number">1</span>);<br>          <br>        LL ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>, r=<span class="hljs-number">2</span>; l&lt;=n; ++l) &#123;<br>            <span class="hljs-keyword">for</span>(; r &lt;= n <span class="hljs-keyword">and</span> x[r] - x[l] &lt;= k; ++r);<br>            ans += r - l - <span class="hljs-number">1</span>;<br>        &#125;<br>         <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HDU6119-小小粉丝度度熊"><a href="#HDU6119-小小粉丝度度熊" class="headerlink" title="HDU6119 小小粉丝度度熊"></a>HDU6119 小小粉丝度度熊</h2><p><strong>类似 CF1041D Glider</strong></p><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>给出 $n$ 个已签到的天数区间，$m$ 张补签卡，求可获得的最大连续签到时长。</p><h3 id="解-1"><a href="#解-1" class="headerlink" title="解"></a>解</h3><p>尺取模板。</p><p>天数区间可重叠，须进行合并。</p><p>需要注意的是，当已确定最长合法区间 $[l,r]$ 后（即下一个区间与 $r$ 的距离大于剩余的补签卡数量，连不上），应把剩余补签卡全部应用到 $r$ 之后的天数上得到更优解。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>边界条件较多。</p><p>$R$ 为已加入队列的最后一个区间，判断的是区间 $R+1$ 的合法性。</p><p>特判第一个区间，开始时 $sum$ 直接加上第一个已签到区间的长，使用 $0$ 张补签卡。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110000</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> l, r;<br>&#125; a[N], b[N];<br><br><span class="hljs-keyword">bool</span> flag[N];<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.l &lt; b.l; &#125;<br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a &gt; b ? a : b; &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     <br>    freopen(<span class="hljs-string">&quot;hdu6119.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>     <br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF) &#123;<br>          <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;b[i].l, &amp;b[i].r),<br>            flag[i] = <span class="hljs-literal">false</span>;<br>                <br>        sort(b+<span class="hljs-number">1</span>, b+n+<span class="hljs-number">1</span>, cmp);<br>          <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(b[i<span class="hljs-number">-1</span>].r &gt;= b[i].l) &#123;<br>                b[i].l = b[i<span class="hljs-number">-1</span>].l;<br>                b[i].r = <span class="hljs-built_in">max</span>(b[i].r, b[i<span class="hljs-number">-1</span>].r);<br>                flag[i<span class="hljs-number">-1</span>] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>          <br>        <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>            <span class="hljs-keyword">if</span>(flag[i]) <span class="hljs-keyword">continue</span>;<br>            a[++tot].l = b[i].l;<br>            a[tot].r = b[i].r;<br>        &#125;<br>         <br>        <span class="hljs-keyword">int</span> sum = a[<span class="hljs-number">1</span>].r - a[<span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>, f = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> L = <span class="hljs-number">1</span>, R = <span class="hljs-number">1</span>; L &lt;= tot; ++L) &#123;<br>            <span class="hljs-keyword">for</span>(; R + <span class="hljs-number">1</span> &lt;= tot <span class="hljs-keyword">and</span> f + a[R+<span class="hljs-number">1</span>].l - a[R].r - <span class="hljs-number">1</span> &lt;= m; ++R)<br>                sum += a[R+<span class="hljs-number">1</span>].r - a[R].r,<br>                f += a[R+<span class="hljs-number">1</span>].l - a[R].r - <span class="hljs-number">1</span>;<br>            ans = <span class="hljs-built_in">max</span>(ans, sum + m - f);<br>            sum -= a[L+<span class="hljs-number">1</span>].l - a[L].l;<br>            f -= a[L+<span class="hljs-number">1</span>].l - a[L].r - <span class="hljs-number">1</span>;<br>        &#125;<br>         <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HDU1937-Finding-Seats"><a href="#HDU1937-Finding-Seats" class="headerlink" title="HDU1937 Finding Seats"></a>HDU1937 Finding Seats</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>电影院有 $R$ 行 $C$ 列，用 <code>&#39;.&#39;</code> 表示空座，<code>&#39;X&#39;</code> 表示不可选。</p><p>要求选择至少 $K$ 个空座位 $(x_i, y_i)$，使得<br>$$<br>(\max x_i -\min x_i)\cdot(\max y_i -\min y_i),1\leqslant i \leqslant K<br>$$<br>最小。</p><h3 id="解-2"><a href="#解-2" class="headerlink" title="解"></a>解</h3><p>二维尺取。</p><p>枚举题目所求长方形的上下界，尺取求出左右最短距离。用二维前缀和简化空位查找。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">330</span>;<br><br><span class="hljs-keyword">int</span> row, c, k;<br><span class="hljs-keyword">char</span> str[N];<br><span class="hljs-keyword">int</span> s[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> y1, <span class="hljs-keyword">int</span> x2, <span class="hljs-keyword">int</span> y2)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> s[x2][y2] - s[x1<span class="hljs-number">-1</span>][y2] - s[x2][y1<span class="hljs-number">-1</span>] + s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     <br>    freopen(<span class="hljs-string">&quot;hdu1937.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>     <br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>         <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;row, &amp;c, &amp;k);<br>        <span class="hljs-keyword">if</span>(row == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> c == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> k == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>          <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=row; ++i) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=c; ++j) &#123;<br>                sum += (str[j] == <span class="hljs-string">&#x27;.&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>                s[i][j] = s[i<span class="hljs-number">-1</span>][j] + sum;<br>            &#125;<br>        &#125; <br>        <br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0x7fffffff</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> up = <span class="hljs-number">1</span>; up &lt;= row; ++up) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> down = up; down &lt;= row; ++down) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>, r=<span class="hljs-number">1</span>; l&lt;=c; ++l) &#123;<br>                    <span class="hljs-keyword">for</span>(; r&lt;=c; ++r) &#123;<br>                        <span class="hljs-keyword">if</span>(query(up, l, down, r) &gt;= k) &#123;<br>                            ans = min(ans, (down - up + <span class="hljs-number">1</span>) * (r - l + <span class="hljs-number">1</span>));<br>                            <span class="hljs-keyword">break</span>; <br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>          <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HDU5358-First-One"><a href="#HDU5358-First-One" class="headerlink" title="HDU5358 First One"></a>HDU5358 First One</h2><h3 id="题面-3"><a href="#题面-3" class="headerlink" title="题面"></a>题面</h3><p>有一数列 $a_1, a_2, \dots, a_n$，求<br>$$<br>\sum_{i=1}^{n} \sum_{j=i}^{n} (i + j)(\lfloor \log_2 \sum_{k=i}^{j} a_k \rfloor + 1)<br>$$<br>的值。特别地，$\log_20=0$。</p><h3 id="解-3"><a href="#解-3" class="headerlink" title="解"></a>解</h3><p>观察上式，对于 $\lfloor\log\rfloor$ 来说，它的一个值可对应很多个真数，考虑分块。</p><p>枚举 $\lfloor \log_2 \sum_{k=i}^{j} a_k \rfloor$ 的每一个值（1~34）。</p><p>令<br>$$<br>v =\lfloor \log_2 \sum_{k=i}^{j} a_k \rfloor<br>$$</p><p>$$<br>sum = \sum_{k=i}^{j}a_k<br>$$</p><p>则<br>$$<br>sum \in [2^{v-1},2^v)<br>$$<br>用尺取求出部分和在此范围的区段 $[i,j]$，求出结果加入计数器。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">110000</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> LL;<br><br>LL cl[<span class="hljs-number">40</span>], a[N], s[N];<br><span class="hljs-keyword">int</span> T, n;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     <br>    freopen(<span class="hljs-string">&quot;hdu5358.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>     <br>    cl[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>, cl[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=<span class="hljs-number">34</span>; ++i) cl[i] = ((cl[i<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">1L</span>L) - <span class="hljs-number">1</span>;<br>     <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, a+i);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) s[i] = s[i<span class="hljs-number">-1</span>] + a[i];<br>         <br>        LL ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(LL k=<span class="hljs-number">1</span>; k&lt;=<span class="hljs-number">34</span>; ++k) &#123;<br>            LL l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(LL i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>                <span class="hljs-keyword">for</span>(l = max(l, i); l &lt;= n <span class="hljs-keyword">and</span> s[l] - s[i<span class="hljs-number">-1</span>] &lt;= cl[k<span class="hljs-number">-1</span>]; ++l);<br>                <span class="hljs-keyword">for</span>(r = max(l, r); r &lt;= n <span class="hljs-keyword">and</span> s[r] - s[i<span class="hljs-number">-1</span>] &lt;= cl[k]; ++r);<br>                ans += k * (i * (r-l) + (l+r<span class="hljs-number">-1</span>) * (r-l) / <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HDU6103-Kirinriki"><a href="#HDU6103-Kirinriki" class="headerlink" title="HDU6103 Kirinriki"></a>HDU6103 Kirinriki</h2><h3 id="题面-4"><a href="#题面-4" class="headerlink" title="题面"></a>题面</h3><p>有两字符串 $A,B$（从 $1$ 编号），长度均为 $n$，定义<br>$$<br>dis(A,B) = \sum_{i=1}^n|A_i-B_{n-i}|<br>$$<br>字符之差定义为其 ASCII 码的差。</p><p>对于一字符串 $S$，找出它的两个不重叠连续子串，他们的 $dis$ 不大于 $m$，求最长合法子串长度。</p><h3 id="解-4"><a href="#解-4" class="headerlink" title="解"></a>解</h3><p>寻找单调性，易得<br>$$<br>\forall S’ \subseteq S,T’\subseteq T:dis(S’,T’)\leqslant dis(S,T)<br>$$<br>因此子串越长越好。</p><p>又$\because$ $\forall$ 两个合法子串，其必关于母串的某一位置（或某两位置之间）对称，考虑枚举这一中心点，分上面的两种情况。</p><p>注意到对于每个子串，其长度越大越好，同时又有约束上界，可对称尺取。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">0</span> ? x : -x; <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><span class="hljs-keyword">int</span> T, n, m;<br><span class="hljs-keyword">char</span> s[<span class="hljs-number">22000</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     <br>    freopen(<span class="hljs-string">&quot;hdu6103.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>     <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>     <br>    <span class="hljs-keyword">while</span>(T--) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>), ans = <span class="hljs-number">0</span>;<br>          <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l1 = i<span class="hljs-number">-1</span>, r1 = i<span class="hljs-number">-1</span>, l2 = i+<span class="hljs-number">1</span>, r2 = i+<span class="hljs-number">1</span>; l1 &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> l2 &lt;= n; --l1, ++l2) &#123;<br>                <span class="hljs-keyword">for</span>(; r1 &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> r2 &lt;= n <span class="hljs-keyword">and</span> f + <span class="hljs-built_in">abs</span>(s[r1] - s[r2]) &lt;= m; --r1, ++r2) f += <span class="hljs-built_in">abs</span>(s[r1] - s[r2]);<br>                ans = max(ans, r2 - l2);<br>                f -= <span class="hljs-built_in">abs</span>(s[l1] - s[l2]);<br>             &#125;<br>        &#125;<br>          <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l1 = i, r1 = i, l2 = i+<span class="hljs-number">1</span>, r2 = i+<span class="hljs-number">1</span>; l1 &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> l2 &lt;= n; --l1, ++l2) &#123;<br>                <span class="hljs-keyword">for</span>(; r1 &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> r2 &lt;= n <span class="hljs-keyword">and</span> f + <span class="hljs-built_in">abs</span>(s[r1] - s[r2]) &lt;= m; --r1, ++r2) f += <span class="hljs-built_in">abs</span>(s[r1] - s[r2]);<br>                ans = max(ans, r2 - l2);<br>                f -= <span class="hljs-built_in">abs</span>(s[l1] - s[l2]);<br>            &#125;<br>        &#125;<br>          <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125; <br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="POJ2739-Sum-of-Consecutive-Prime-Numbers"><a href="#POJ2739-Sum-of-Consecutive-Prime-Numbers" class="headerlink" title="POJ2739 Sum of Consecutive Prime Numbers"></a>POJ2739 Sum of Consecutive Prime Numbers</h2><p>尺取水题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">prime</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">int</span> m = <span class="hljs-keyword">int</span>(<span class="hljs-built_in">sqrt</span>(x));<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=m; ++i) <br>        <span class="hljs-keyword">if</span>(x % i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> x, p[<span class="hljs-number">11000</span>];<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10000</span>; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(prime(i)) p[++tot] = i;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>, r=<span class="hljs-number">1</span>; l&lt;=tot; ++l) &#123;<br>            <span class="hljs-keyword">for</span>(; r &lt;= tot <span class="hljs-keyword">and</span> f + p[r] &lt;= x; ++r) f += p[r];<br>            <span class="hljs-keyword">if</span>(f == x) ++ans;<br>            f -= p[l];<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1198A-MP3"><a href="#CF1198A-MP3" class="headerlink" title="CF1198A MP3"></a>CF1198A MP3</h2><h3 id="题面-5"><a href="#题面-5" class="headerlink" title="题面"></a>题面</h3><p>给出 $n,I$。</p><p>$n$ - 数列 $a_1,a_2,…,a_n$</p><p>选定一个区间 $[l,r]$，并进行操作，使<br>$$<br>v_i =<br>\begin{cases}<br>l&amp;v_i&lt;l\<br>v_i&amp;l\leqslant v_i \leqslant r\<br>r&amp;v_i&gt;r<br>\end{cases}<br>$$<br>要求经过处理后，数列中不同的数的个数 $\leqslant 2^{\lfloor 8I/n\rfloor}$，且使数列中被更改的位置的总数最小，求这个最小值。</p><h3 id="解-5"><a href="#解-5" class="headerlink" title="解"></a>解</h3><p>原题面较长，需耐心看题。</p><p>可先将原数列排序并离散化，记下每种数的出现次数，用前缀和优化求和。因顺序已预先排好，直接尺取 $[l,r]$，使区间内的值最大化，用总数相减得出答案。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">440000</span>;<br> <br><span class="hljs-keyword">int</span> a[N], b[N], cnt[N], s[N], n, I, t;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>, base = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(; x; x &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span>(x &amp; <span class="hljs-number">1</span>) ans *= base;<br>        <span class="hljs-keyword">if</span>(ans &gt; t) <span class="hljs-keyword">return</span> ans;<br>        base *= base;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;cf1198a.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>); <br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;I);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a+i), b[i] = a[i];<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">8</span>*I &gt; n*((<span class="hljs-keyword">int</span>)log2(n) + <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    sort(b+<span class="hljs-number">1</span>, b+n+<span class="hljs-number">1</span>);<br>    t = unique(b+<span class="hljs-number">1</span>, b+n+<span class="hljs-number">1</span>) - (b+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">int</span> K = power(<span class="hljs-number">8</span>*I/n);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">int</span> p = lower_bound(b+<span class="hljs-number">1</span>, b+t+<span class="hljs-number">1</span>, a[i]) - b;<br>        ++cnt[p];<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=t; ++i) s[i] = s[i<span class="hljs-number">-1</span>] + cnt[i];<br>    <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0x7fffffff</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> l=<span class="hljs-number">1</span>, r; l&lt;=t; ++l) &#123;<br>        r = min(l + K - <span class="hljs-number">1</span>, t);<br>        ans = min(ans, s[t] - (s[r] - s[l<span class="hljs-number">-1</span>]));<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF180E-Cubes"><a href="#CF180E-Cubes" class="headerlink" title="CF180E Cubes"></a>CF180E Cubes</h2><h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>现有一数列 $a_1,a_2,…,a_n (1\leqslant a_i \leqslant m)$（更准确地翻译的话，现有一排小方块，第 $i$ 个方块的颜色为 $a_i$），求在最多删去 $k$ 个位置的数后，所能获得的最长连续子段的长度，要求该子段中所有数均相同．</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li>可以不删数．</li><li>$1 \leqslant n \leqslant 2 \times 10^5$，$1 \leqslant m \leqslant 10^5$，$0 \leqslant k &lt;n$．</li><li>样例#1：删去 $5th$ 和 $6th$．</li><li>样例#2：删去 $4th$ 和 $7th$．</li><li>样例#3：不变．</li></ul><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>枚举每种颜色，这样问题就可被简化为对于每种颜色，求出其修改后的最长合法子段，可用尺取法求解。</p><p>尺取法与单调队列有关，应用范围比较小，要求原问题在满足条件的情况下，长度越长，答案越好。利用双指针 $l,r$ 及队列思想，对于同一个 $l$ 让 $r$ 尽可能延伸至最远，得到一个答案区间，$r$ 已到达最远后将与 $l$ 有关的信息弹出，对于多个答案区间找出最优解。</p><p>更详细的解释请看<a href="%5Bhttps://www.baidu.com/s?ie=UTF-8&wd=%E5%B0%BA%E5%8F%96%E6%B3%95%5D(https://www.baidu.com/s?ie=UTF-8&wd=%E5%B0%BA%E5%8F%96%E6%B3%95)">这里</a></p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><p>将原数列分块，对每种颜色建立链表，枚举时直接访问。</p><p>链表的每个节点存储该颜色块的左右端点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">220000</span>, M = <span class="hljs-number">110000</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> l, r, next;<br>&#125; a[N];<br><br><span class="hljs-keyword">int</span> tmp[M], n, m, k, h[M];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;cf180e.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);<br>    <br>    <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>, tot = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, c; i&lt;=n; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;c);<br>        <span class="hljs-keyword">if</span>(f == c) a[tot].r = i;<br>        <span class="hljs-keyword">else</span> &#123;<br>            a[++tot] = (node) &#123;i, i, c, <span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-keyword">if</span>(h[x]) a[tmp[c]].next = tmp[c] = tot;<br>            <span class="hljs-keyword">else</span> h[x] = tmp[x] = tot;<br>            f = c;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=m; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(h[i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 无该颜色</span><br>        <span class="hljs-keyword">int</span> L = h[i], R = h[i], f = <span class="hljs-number">0</span>, sum = a[h[i]].r - a[h[i]].l + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(; L; L = a[L].next) &#123;<br>            <span class="hljs-keyword">for</span>(; a[R].next <span class="hljs-keyword">and</span> f + a[a[R].next].l - a[R].r - <span class="hljs-number">1</span> &lt;= k; R = a[R].next) <br>                f += a[a[R].next].l - a[R].r - <span class="hljs-number">1</span>, <br>                sum += a[a[R].next].r - a[a[R].next].l + <span class="hljs-number">1</span>;    <br>            ans = max(ans, sum); <span class="hljs-comment">// 统计</span><br>            sum -= a[L].r - a[L].l + <span class="hljs-number">1</span>; <span class="hljs-comment">// 弹出</span><br>            f -= a[a[L].next].l - a[L].r - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="CF939E-Maximize"><a href="#CF939E-Maximize" class="headerlink" title="CF939E Maximize!"></a>CF939E Maximize!</h2><h3 id="题面-6"><a href="#题面-6" class="headerlink" title="题面"></a>题面</h3><p>对于一个只包含正整数的 multiset $S$，你需要支持以下 $2$ 种操作：</p><ul><li>$1$ <ul><li>找出 $S$ 的一个子集 $s$，使 $max(s)-mean(s)$ 最大，并输出这个最大值。保留十位小数。</li></ul></li><li>$2$ $x$<ul><li>加入一个新数 $x$ 到 $S$ 中，保证加入的数是递增的。</li></ul></li></ul><h3 id="解-6"><a href="#解-6" class="headerlink" title="解"></a>解</h3><p>思维题。</p><p>$max$ 越大越好，$mean$ 越小越好。</p><p>结论一：子集 $s$ 中必包含 $\max S$。</p><p>结论二：$\forall x \in S, x\notin s,mean(s) &gt; x:mean(s) &lt; mean(s\cup{x})$​ 。</p><p>证明略。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><p><del>略丑</del>。</p><p>为防止 WA，特判了较小的情况，维护的也略微麻烦一点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">550000</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">double</span> LF;<br><br><span class="hljs-keyword">int</span> Q, s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;cf939e.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-keyword">int</span> tot = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>    LF sum = <span class="hljs-number">0</span>, lastans = <span class="hljs-number">0</span>, lasttype = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;Q);<br>    <br>    <span class="hljs-keyword">while</span>(Q--) &#123;<br>    <br>        <span class="hljs-keyword">int</span> type;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;type);<br>        <br>        <span class="hljs-keyword">if</span>(type == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s[++tot]);<br>            lasttype = type;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <br>            <span class="hljs-keyword">if</span>(lasttype == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, lastans);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(tot == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, (LF)<span class="hljs-number">0</span>);<br>                lastans = <span class="hljs-number">0</span>;<br>                lasttype = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span>(tot == <span class="hljs-number">2</span>) &#123;<br>                lastans = s[<span class="hljs-number">2</span>] - (s[<span class="hljs-number">1</span>] + s[<span class="hljs-number">2</span>]) / <span class="hljs-number">2.0</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, lastans);<br>                lasttype = <span class="hljs-number">2</span>;<br>                sum = s[<span class="hljs-number">1</span>], f = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=f+<span class="hljs-number">1</span>; i&lt;tot; ++i) &#123;<br>                <span class="hljs-keyword">if</span>((LF)(sum + s[tot]) / i &gt; (LF)s[i]) f = i, sum += s[i];<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>; <br>            &#125;<br>            <br>            lastans = s[tot] - (sum + s[tot]) / (f+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, lastans);<br>            <br>            lasttype = type;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 单调队列 </tag>
            
            <tag> 尺取法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列</title>
      <link href="/monotonous-queue/"/>
      <url>/monotonous-queue/</url>
      
        <content type="html"><![CDATA[<h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><p>具有单调性的队列。当一新值准备入队时，须先<strong>从后向前</strong>，将对后来答案没有了影响的点弹出，再<strong>从前向后</strong>，将所有超出了统计范围的点弹出。对于大多数问题，求解过程中会锁定很多答案区间，在线求最值。</p><h2 id="P3088-拥挤的奶牛"><a href="#P3088-拥挤的奶牛" class="headerlink" title="P3088 拥挤的奶牛"></a>P3088 拥挤的奶牛</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>有 $N$ 头奶牛沿着一维的栅栏吃草，第 $i$ 头奶牛在目标点 $x_i$，它的身高是 $h_i$ 。当一头奶牛左边 $D$ 距离内而且右边 $D$ 距离内有身高至少是它的两倍的奶牛，它就会觉得拥挤。</p><p>请计算觉得拥挤的奶牛的数量。</p><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><p>（单调队列模板？）</p><p>当一奶牛将要入队时：</p><ul><li><strong>从后往前</strong>，将身高小于该奶牛的弹出（<code>--tail</code>），因为将要进队的奶牛更加靠后，影响范围一定更大，对答案的贡献也一定更大。</li><li><strong>从前往后</strong>，将与该奶牛距离已超过 $D$ 的奶牛弹出（<code>++head</code>）</li><li>将该奶牛入队。</li><li>与队头奶牛比较身高，若符合则打上标记，若左右两次统计均符合，则计入答案。</li></ul><p>每次统计的是该奶牛左侧的合法性，从后到前再做一遍就可以了。</p><p>按照以上规则就可以统计答案了。显然该队列一定为单调递降队列。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">55000</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> x, h;<br>&#125; a[N];<br><br><span class="hljs-keyword">int</span> n, d, <span class="hljs-built_in">queue</span>[N];<br><span class="hljs-keyword">bool</span> l[N], r[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;p3088.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;d);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a[i].x, &amp;a[i].h);<br>    <br>    sort(a+<span class="hljs-number">1</span>, a+n+<span class="hljs-number">1</span>, cmp);<br>    <br>    <span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">queue</span>[head] = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; ++i) &#123;<br>        <span class="hljs-keyword">while</span>(head &lt; tail <span class="hljs-keyword">and</span> a[<span class="hljs-built_in">queue</span>[tail<span class="hljs-number">-1</span>]].h &lt;= a[i].h) --tail;<br>        <span class="hljs-built_in">queue</span>[tail++] = i;<br>        <span class="hljs-keyword">while</span>(head &lt; tail <span class="hljs-keyword">and</span> a[i].x - a[<span class="hljs-built_in">queue</span>[head]].x &gt; d) ++head;<br>        <br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-built_in">queue</span>[head]].h &gt;= (a[i].h &lt;&lt; <span class="hljs-number">1</span>)) l[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">queue</span>[head] = n;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">1</span>; --i) &#123;<br>        <span class="hljs-keyword">while</span>(head &lt; tail <span class="hljs-keyword">and</span> a[<span class="hljs-built_in">queue</span>[tail<span class="hljs-number">-1</span>]].h &lt;= a[i].h) --tail;<br>        <span class="hljs-built_in">queue</span>[tail++] = i;<br>        <span class="hljs-keyword">while</span>(head &lt; tail <span class="hljs-keyword">and</span> a[<span class="hljs-built_in">queue</span>[head]].x - a[i].x &gt; d) ++head;<br>        <br>        <span class="hljs-keyword">if</span>(a[<span class="hljs-built_in">queue</span>[head]].h &gt;= (a[i].h &lt;&lt; <span class="hljs-number">1</span>)) r[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <br>        <span class="hljs-keyword">if</span>(l[i] <span class="hljs-keyword">and</span> r[i]) ++ans;<br>        <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P3522-Temperature"><a href="#P3522-Temperature" class="headerlink" title="P3522 Temperature"></a>P3522 Temperature</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>有 $n$ 个段，第 $i$ 个为 $[l_i, r_i]$，现要在几个连续的段中，每段中各取一个值，构成一序列，要求该序列不能下降，求序列的最大长度。</p><h3 id="解-1"><a href="#解-1" class="headerlink" title="解"></a>解</h3><p>以段的左端点维护单调序列。</p><p>当一新段将要入队时：</p><ul><li><strong>从后向前</strong>，将所有左点比新段的左点小的段弹出。</li><li><strong>从前向后</strong>，将所有<strong>右点</strong>比新段的<strong>左点</strong>小的段弹出。</li><li>统计答案：用当前位置减去<strong>队头的上一段的位置</strong><ul><li>$\because$ 队头的上一段已被弹出</li><li>$\therefore$ 从队头的上一段的下一段起（可能已被弹出）至当前位置均属于合法序列</li></ul></li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1100000</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a &gt; b ? a : b; &#125;<br><br><span class="hljs-keyword">int</span> n, l[N], r[N], <span class="hljs-built_in">queue</span>[N], ans = <span class="hljs-number">-1</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;p3522.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, l+i, r+i);<br>    <br>    <span class="hljs-keyword">int</span> head = <span class="hljs-number">0</span>, tail = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">queue</span>[head] = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) &#123;<br>        <br>        <span class="hljs-keyword">while</span>(head &lt; tail <span class="hljs-keyword">and</span> l[i] &gt;= l[<span class="hljs-built_in">queue</span>[tail<span class="hljs-number">-1</span>]]) --tail;<br>        <span class="hljs-built_in">queue</span>[tail++] = i;<br>        <br>        <span class="hljs-keyword">while</span>(head &lt; tail <span class="hljs-keyword">and</span> l[<span class="hljs-built_in">queue</span>[head]] &gt; r[i]) ++head;<br>        <br>        ans = <span class="hljs-built_in">max</span>(ans, i - <span class="hljs-built_in">queue</span>[head<span class="hljs-number">-1</span>]);<br>        <br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About CODESTYLE</title>
      <link href="/about-codestyle/"/>
      <url>/about-codestyle/</url>
      
        <content type="html"><![CDATA[<h3 id="2020-04-05-修改："><a href="#2020-04-05-修改：" class="headerlink" title="2020.04.05 修改："></a>2020.04.05 修改：</h3><ul><li>2020.02 中的所有修改作废。</li></ul><h3 id="2020-02-修改："><a href="#2020-02-修改：" class="headerlink" title="2020.02 修改："></a>2020.02 修改：</h3><ul><li><p>最近喜欢用 <code>inline</code> 。</p></li><li><p>尽量避免强制类型转换。</p></li><li><p>使用构造函数。</p></li></ul><h3 id="2020-01-修改："><a href="#2020-01-修改：" class="headerlink" title="2020.01 修改："></a>2020.01 修改：</h3><ul><li><p>凡继承自 C 语言的库，均使用 <code>&lt;xxx.h&gt;</code> 而不是 <code>&lt;cxxx&gt;</code> 。</p></li><li><p>以下情况中，运算符前后<strong>一定</strong>不加空格：</p><ul><li><p><code>for</code> 循环括号内内容较短时（<strong><em>e.g.</em></strong> <code>for(int i=1; i&lt;=n; ++i)</code> ）</p></li><li><p>运算符前后关系较密切时</p></li></ul></li><li><p>以下情况中，运算符前后<strong>一般</strong>不加空格：</p><ul><li>变量名长度为 1 时</li></ul></li><li><p>以下情况中，运算符前后<strong>可能</strong>不加空格：</p><ul><li>考试即将结束时</li></ul></li><li><p>以下情况中，运算符前后<strong>不可能</strong>不加空格：</p><ul><li>除以上情况之外的所有情况</li></ul></li><li><p><code>typedef long long LL</code> 。</p></li></ul><h3 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a><em>e.g.</em></h3><p>（ <code>2-SAT</code> 模板节选）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> u, v, next;<br>    node() &#123;&#125;<br>    node(<span class="hljs-keyword">int</span> _u, <span class="hljs-keyword">int</span> _v, <span class="hljs-keyword">int</span> _next): u(_u), v(_v), next(_next) &#123;&#125;<br>&#125; e[N];<br><span class="hljs-keyword">int</span> h[N], tot = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    e[++tot] = node(u, v, h[u]);<br>    h[u] = tot;<br>&#125;<br><br><span class="hljs-keyword">int</span> dfn[N], low[N], tag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> id[N], num = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; s;<br><br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span> </span>&#123;<br>    dfn[u] = low[u] = ++tag;<br>    s.push(u);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h[u]; i; i = e[i].next) &#123;<br>        <span class="hljs-keyword">int</span> v = e[i].v;<br>        <span class="hljs-keyword">if</span>(dfn[v]) &#123;<br>            <span class="hljs-keyword">if</span>(!id[v]) low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[v]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tarjan(v);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[v]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(dfn[u] == low[u]) &#123;<br>        id[u] = ++num;<br>        <span class="hljs-keyword">for</span>(; s.top() != u; s.pop()) <br>            id[s.top()] = num;<br>        s.pop();<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>    freopen(<span class="hljs-string">&quot;p4782.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-built_in">stdin</span>);<br>    <br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>, _i, a, _j, b, u, v; i&lt;=m; ++i) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;_i, &amp;a, &amp;_j, &amp;b);<br>        u = (_i<span class="hljs-number">-1</span>)*<span class="hljs-number">2</span> + a, v = (_j<span class="hljs-number">-1</span>)*<span class="hljs-number">2</span> + b;<br>        add(u^<span class="hljs-number">1</span>, v);<br>        add(v^<span class="hljs-number">1</span>, u);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;(n&lt;&lt;<span class="hljs-number">1</span>); ++i)<br>        <span class="hljs-keyword">if</span>(!dfn[i]) tarjan(i);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;(n&lt;&lt;<span class="hljs-number">1</span>); i+=<span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span>(id[i] == id[i^<span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;IMPOSSIBLE\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;POSSIBLE\n&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;(n&lt;&lt;<span class="hljs-number">1</span>); i+=<span class="hljs-number">2</span>) <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, id[i] &lt; id[i^<span class="hljs-number">1</span>] ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="考场码风："><a href="#考场码风：" class="headerlink" title="考场码风："></a>考场码风：</h3><p>（牛客CSP-S提高组赛前集训营2 T3-维护序列 <code>2019.10.31</code>）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br> <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">100005</span>, INF = <span class="hljs-number">0x7fffffff</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">0</span> ? x : -x; &#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a &gt; b ? b : a; &#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> a, b, f, s;<br>    node *l, *r;<br>&#125; *root, pool[<span class="hljs-number">4</span>*N];<br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pair</span> &#123;</span><br>    <span class="hljs-keyword">int</span> l, r;<br>&#125; tmpx[N], tmpy[N];<br> <br><span class="hljs-keyword">int</span> id = <span class="hljs-number">-1</span>, cntx, cnty;<br><span class="hljs-keyword">int</span> s[N];<br><span class="hljs-function">node *<span class="hljs-title">newnode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    pool[++id] = (node) &#123;a, b, s[a], <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>&#125;;<br>    <span class="hljs-keyword">return</span> &amp;pool[id];<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(node *&amp;root, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    root = newnode(a,b);<br>    <span class="hljs-keyword">if</span>(a&lt;b) &#123;<br>        <span class="hljs-keyword">int</span> mid = (a+b) &gt;&gt; <span class="hljs-number">1</span>;<br>        build(root-&gt;l, a, mid);<br>        build(root-&gt;r, mid+<span class="hljs-number">1</span>, b);<br>        <span class="hljs-keyword">if</span>(root-&gt;l-&gt;f == root-&gt;r-&gt;f) root-&gt;f = root-&gt;l-&gt;f;<br>        <span class="hljs-keyword">else</span> root-&gt;f = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(node *root, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">if</span>(root-&gt;f) <span class="hljs-keyword">return</span> (root-&gt;f == x);<br> <br>    <span class="hljs-keyword">bool</span> s1 = check(root-&gt;l, x);<br>    <span class="hljs-keyword">bool</span> s2 = check(root-&gt;r, x);<br>    <span class="hljs-keyword">return</span> (s1 <span class="hljs-keyword">or</span> s2);<br>     <br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">edit</span><span class="hljs-params">(node *root, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt;= root-&gt;a <span class="hljs-keyword">and</span> root-&gt;b &lt;= b) &#123;<br>        root-&gt;f = x;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(root-&gt;f) &#123;<br>        root-&gt;l-&gt;f = root-&gt;f;<br>        root-&gt;r-&gt;f = root-&gt;f;<br>        root-&gt;f = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = (root-&gt;a + root-&gt;b) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(a &lt;= mid) edit(root-&gt;l, a, b, x);<br>    <span class="hljs-keyword">if</span>(mid &lt; b) edit(root-&gt;r, a, b, x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(node *root, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">if</span>(root-&gt;f) &#123;<br>        <span class="hljs-keyword">if</span>(root-&gt;f == x) tmpx[++cntx] = (<span class="hljs-built_in">pair</span>) &#123;root-&gt;a, root-&gt;b&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;f == y) tmpy[++cnty] = (<span class="hljs-built_in">pair</span>) &#123;root-&gt;a, root-&gt;b&#125;;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">bool</span> s1 = query(root-&gt;l, x, y);<br>    <span class="hljs-keyword">bool</span> s2 = query(root-&gt;r, x, y);<br>     <br>    <span class="hljs-keyword">return</span> (s1 <span class="hljs-keyword">or</span> s2);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">char</span> c = getchar();<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>, f=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(c &lt; <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &#123; f = (c == <span class="hljs-string">&#x27;-&#x27;</span>) ? <span class="hljs-number">-1</span> : f; c = getchar(); &#125;<br>    <span class="hljs-keyword">while</span>(c &gt;=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> c &lt;=<span class="hljs-string">&#x27;9&#x27;</span>) &#123; x = (x&lt;&lt;<span class="hljs-number">3</span>) + (x&lt;&lt;<span class="hljs-number">1</span>) + (c-<span class="hljs-string">&#x27;0&#x27;</span>); c = getchar(); &#125;<br>    <span class="hljs-keyword">return</span> x*f;<br>&#125;<br> <br><span class="hljs-keyword">int</span> lastans = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), flag = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) s[i] = <span class="hljs-built_in">read</span>();<br>    build(root, <span class="hljs-number">1</span>, n);<br>     <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> ii=<span class="hljs-number">1</span>; ii&lt;=m; ++ii) &#123;<br>        <span class="hljs-keyword">if</span>(!flag) lastans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> opt = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span>(opt == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> l = <span class="hljs-built_in">read</span>()^lastans, r = <span class="hljs-built_in">read</span>()^lastans, x = <span class="hljs-built_in">read</span>()^lastans;<br>            edit(root, l, r, x);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(opt == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>()^lastans, y = <span class="hljs-built_in">read</span>()^lastans;<br>            <span class="hljs-keyword">if</span>(x == y) &#123;<br>                <span class="hljs-keyword">bool</span> f = check(root, x);<br>                lastans = <span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, f ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            cntx = cnty = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">bool</span> f = query(root, x, y);<br>            <span class="hljs-keyword">if</span>(!f <span class="hljs-keyword">or</span> !cntx <span class="hljs-keyword">or</span> !cnty) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>                lastans = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            lastans = INF;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=cntx; ++i) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>; j&lt;=cnty; ++j) &#123;<br>                    lastans = <span class="hljs-built_in">min</span>(lastans, <span class="hljs-built_in">abs</span>(tmpx[i].r - tmpy[j].l));<br>                    lastans = <span class="hljs-built_in">min</span>(lastans, <span class="hljs-built_in">abs</span>(tmpx[i].l - tmpy[j].r));<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, lastans);<br>        &#125;<br>         <br>    &#125;<br>     <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 码风 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还在用 STL 排序？</title>
      <link href="/still-using-stl-sort/"/>
      <url>/still-using-stl-sort/</url>
      
        <content type="html"><![CDATA[<p><strong>还在用 STL 排序？</strong></p><h4 id="使用-C-库函数"><a href="#使用-C-库函数" class="headerlink" title="使用 C 库函数"></a>使用 C 库函数</h4><p>很多人都不知道的是，其实 C 语言也是自带排序函数的，就是位于 <code>&lt;stdlib.h&gt;</code> 库中的 <code>qsort</code></p><p>函数声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">qsort</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *base, <span class="hljs-keyword">size_t</span> nitems, <span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>, <span class="hljs-keyword">int</span> (*compar)(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>*))</span></span><br></code></pre></td></tr></table></figure><p>其中</p><ul><li><strong>base</strong> - 指向要排序的数组的第一个元素的指针</li><li><strong>nitems</strong> - base 指向的数组中元素的个数</li><li><strong>size</strong> - 数组中每个元素的大小（以字节为单位）</li><li><strong>compar</strong> - 用来比较两个元素的函数</li></ul><p>与  <code>&lt;algorithm&gt;</code>  中的 <code>std::sort</code> 略有差异，尤其是在 <code>compar</code> 函数的定义上。</p><p>其形参必须是 <code>const void*</code> 型（可以理解为，在 <code>compar</code> 函数内部会将 <code>const void*</code> 型转换成实际类型）。</p><ul><li>如果返回值小于0（&lt; 0），那么p1所指向元素会被排在p2所指向元素的左面；</li><li>如果返回值等于0（= 0），那么p1所指向元素与p2所指向元素的顺序不确定；</li><li>如果返回值大于0（&gt; 0），那么p1所指向元素会被排在p2所指向元素的右面。</li></ul><p>在 <code>C11</code> 标准中，新增了另一个排序函数 <code>qsort_s</code> ，但在无编译开关的情况下无法使用。</p><p>另外，虽然它的名字叫 <code>qsort</code> ，但目前还没有任何一个 C 标准规定其必须通过快排实现（）</p><p>实测在整数排序下，效率与 <code>STL</code> 相差无几，都在 <code>140ms/1.20MB</code> 左右。</p><p><strong>Code (C) :</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (*(<span class="hljs-keyword">int</span>*)a - *(<span class="hljs-keyword">int</span>*)b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n, i, a[N];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a+i);<br>    qsort(a, n, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>), cmp);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[n<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-PB-DS"><a href="#使用-PB-DS" class="headerlink" title="使用 PB_DS"></a>使用 PB_DS</h4><p><code> PB_DS</code>，<del>又称平板电视</del>，是一个冷门但功能极为强大的 <code>GNU-C++</code> 扩展库，但在 <code>OI</code> 中（尤其是省选以下）极少用到。</p><p>该库中提供了大量数据结构（<del>虽然不开O2的话几乎都会T掉</del>），以树形结构为主，<del>拿出来基本个个都可以排序</del></p><p><strong>堆：</strong></p><p>（未开 O2，<code>248ms/5.23MB</code> ）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/extc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> __gnu_pbds;<br><br>__gnu_pbds::<span class="hljs-built_in">priority_queue</span> &lt; <span class="hljs-keyword">int</span>, greater&lt;<span class="hljs-keyword">int</span>&gt;, pairing_heap_tag &gt; q;<br><br><span class="hljs-keyword">int</span> n;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>, a; i&lt;n; ++i) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a), q.push(a); <br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;n; ++i) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, q.top()), q.pop();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 <code>pb_ds </code> 中的 <code>tree</code> 相当于 <code>set</code> 而不是 <code>multiset</code> ，因此<del>比手写快排还长</del>，不再展示。</p><p>上文所述排序方法切勿使用。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> STL </tag>
            
            <tag> PB_DS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪</title>
      <link href="/snow/"/>
      <url>/snow/</url>
      
        <content type="html"><![CDATA[<iframe width=100% height=1024 frameborder=0 scrolling=yes src="https://cdn.jsdelivr.net/gh/SerokSSR/snow-pdf/snow-0706.pdf"></iframe><p>若文章在你的设备上无法正常显示，请<a href="https://cdn.jsdelivr.net/gh/SerokSSR/snow-pdf/snow-0706.pdf">点击此处</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Terminal · 番外</title>
      <link href="/terminal-extra/"/>
      <url>/terminal-extra/</url>
      
        <content type="html"><![CDATA[<h1 id="Terminal-·-番外"><a href="#Terminal-·-番外" class="headerlink" title="Terminal · 番外"></a>Terminal · 番外</h1><p>&emsp;&emsp;</p><p>他站在一片未知的天空里；他听到人的呐喊。</p><p>他看见了一群人，如同星星点点的火光，向着远处的一扇门去。</p><p>他看见了她。</p><p>&emsp;&emsp;</p><p>他感受着她的面颊：寒气如冰锥一般刺了进来。他睁开眼。</p><p><strong>她睁开眼。</strong></p><p>&emsp;&emsp;</p><p>他的心不禁悲凉起来了。</p><p>&emsp;&emsp;</p><p>她嫣然一笑，胜过所有盛开的花。</p><p>&emsp;&emsp;</p><p>她一次也没有回头。</p><p>&emsp;&emsp;</p><p><b>向她刮来；</b>从她的耳际掠过。</p><p>&emsp;&emsp;</p><p>海边。他在海边伫立着。</p><p>一阵风儿吹过。<strong>在他的眼前一闪。</strong></p><p>他终于叩了一下。</p><p>他试着喊了一声；无可弥补的梦。</p><p>&emsp;&emsp;</p><p>他向前探了探；一道雷池；。</p><p>&emsp;&emsp;</p><p><strong>在他的眼前一闪；。</strong></p><p>&emsp;&emsp;</p><p>他迟疑了一下。<b>两下？。</b></p><p>她加快了脚步。</p><p>&emsp;&emsp;</p><p>他哪里来的勇气？</p><p>&emsp;&emsp;</p><p><strong>她可还记得他？</strong></p><p>&emsp;&emsp;</p><hr><center>(EOF)</center><p>&emsp;&emsp;</p><ul><li>2019.11.16</li><li>CSP-S 2019 D1</li><li>心态爆炸（80/300）</li><li>AFO</li><li><code>//zsh ak ioi</code></li><li>WJH / LYZ</li><li><del>颓</del></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
          <category> 未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 Splay（一）</title>
      <link href="/about-splay/"/>
      <url>/about-splay/</url>
      
        <content type="html"><![CDATA[<h1 id="一、旋转（Zig-Zag）"><a href="#一、旋转（Zig-Zag）" class="headerlink" title="一、旋转（Zig - Zag）"></a>一、旋转（Zig - Zag）</h1><h2 id="1-右旋（Right-Rotation）"><a href="#1-右旋（Right-Rotation）" class="headerlink" title="1. 右旋（Right Rotation）"></a>1. 右旋（Right Rotation）</h2><p>观察每个节点的变化，其中每个节点都有指向其父节点的指针没有画出。</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/splay1.png" alt="1.png"></p><p><strong>①②③</strong>处节点连接有变化。</p><h3 id="（1）-Q-的左子树修改为-P-的右子树的内容"><a href="#（1）-Q-的左子树修改为-P-的右子树的内容" class="headerlink" title="（1）$Q$ 的左子树修改为 $P$ 的右子树的内容"></a>（1）$Q$ 的左子树修改为 $P$ 的右子树的内容</h3><p>即 $B$ 成为 $Q$ 的左子树， $B$ 的父节点是 $Q$ 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">q-&gt;left = p-&gt;right; <br>p-&gt;right-&gt;father = q; <br></code></pre></td></tr></table></figure><p><strong>注意 P​ 可能没有右子树（即不存在 <code>P-&gt;right</code> 节点）。</strong></p><p>修改如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">q-&gt;left = p-&gt;right; <br><span class="hljs-keyword">if</span>(p-&gt;right != <span class="hljs-literal">NULL</span>) p-&gt;right-&gt;father = q;<br></code></pre></td></tr></table></figure><h3 id="（2）-P-的右子树修改为-Q-，且同时-Q-的父节点修改为-P-。"><a href="#（2）-P-的右子树修改为-Q-，且同时-Q-的父节点修改为-P-。" class="headerlink" title="（2）$P$ 的右子树修改为 $Q$ ，且同时 $Q$ 的父节点修改为 $P$ 。"></a>（2）$P$ 的右子树修改为 $Q$ ，且同时 $Q$ 的父节点修改为 $P$ 。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">p-&gt;right = q; <br>q-&gt;father = p;<br></code></pre></td></tr></table></figure><p><strong>注意 Q 和 P 的左右子树有变化，所以 Q,P 的信息需要重新维护。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">update(q); update(p); <span class="hljs-comment">//先Q后P</span><br></code></pre></td></tr></table></figure><h3 id="（3）-R-的子树应该修改为-P"><a href="#（3）-R-的子树应该修改为-P" class="headerlink" title="（3）$R$ 的子树应该修改为 $P$"></a>（3）$R$ 的子树应该修改为 $P$</h3><p>需要判断 $Q$ 是 $R$ 的哪种子树，左子树则 $P$ 给 $R$ 的左子树，否则给右子树。</p><p>全局变量 $root$ 记录树根。</p><p><strong>特判 $Q$ 有可能就是树根（即 $R$ 不存在）；</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(r == <span class="hljs-literal">NULL</span>) &#123;<br>   p-&gt;father = <span class="hljs-literal">NULL</span>; root = p; <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(q == r-&gt;left) &#123;<br>   r-&gt;left = p; p-&gt;father = r;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>   r-&gt;right = p; p-&gt;father = r;<br>&#125;<br></code></pre></td></tr></table></figure><p>整理一下，<strong>不管 Q​ 有无父节点，P 的父节点均修改为 Q 的父节点</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">p-&gt;father = r;<br><span class="hljs-comment">//记录树根</span><br><span class="hljs-keyword">if</span>(r == <span class="hljs-literal">NULL</span>) &#123; root = p; <span class="hljs-keyword">return</span>; &#125;<br><span class="hljs-comment">//判断P连到R的那颗子树</span><br><span class="hljs-keyword">if</span>(q == r-&gt;left) r-&gt;left = p; <br><span class="hljs-keyword">else</span> r-&gt;right = p; <br></code></pre></td></tr></table></figure><p><strong>Code :</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">right_rotate</span><span class="hljs-params">(node *p)</span> </span>&#123;<br><br>    node *q = p-&gt;father;     <span class="hljs-comment">//记录p的父节点</span><br>    node *r = q-&gt;father;     <span class="hljs-comment">//记录p的父节点的父节点</span><br><br>    <span class="hljs-comment">//操作1</span><br>    q-&gt;left = p-&gt;right; <br>    <span class="hljs-keyword">if</span>(p-&gt;right != <span class="hljs-literal">NULL</span>) p-&gt;right-&gt;father = q;<br><br>    <span class="hljs-comment">//操作2</span><br>    p-&gt;right = q; q-&gt;father = p;<br><br>    <span class="hljs-comment">//维护节点信息（注意此处可暂不维护P）</span><br>    update(q); <span class="hljs-comment">//update(p);</span><br><br>    <span class="hljs-comment">//操作3</span><br>    p-&gt;father = r;<br>    <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">NULL</span>) &#123; root = p; <span class="hljs-keyword">return</span>; &#125;<br>    <br>    <span class="hljs-keyword">if</span>(q == r-&gt;left) r-&gt;left = p; <br>    <span class="hljs-keyword">else</span> r-&gt;right = p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、左旋（Left-Rotation）"><a href="#2、左旋（Left-Rotation）" class="headerlink" title="2、左旋（Left Rotation）"></a>2、左旋（Left Rotation）</h2><p>同理右旋，只是<strong>①②</strong>不同。</p><p><strong>Code :</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">left_rotate</span><span class="hljs-params">(node *p)</span> </span>&#123;<br><br>    node *q = p-&gt;father;     <span class="hljs-comment">//记录p的父节点</span><br>    node *r = q-&gt;father;     <span class="hljs-comment">//记录p的父节点的父节点</span><br><br>    <span class="hljs-comment">//操作1</span><br>    q-&gt;right = p-&gt;left; <br>    <span class="hljs-keyword">if</span>(p-&gt;left != <span class="hljs-literal">NULL</span>) p-&gt;left-&gt;father = q; <br><br>    <span class="hljs-comment">//操作2</span><br>    p-&gt;left = q; q-&gt;father = p;<br><br>    <span class="hljs-comment">//维护节点信息</span><br>    update(q); <span class="hljs-comment">//update(p);</span><br><br>    <span class="hljs-comment">//操作3</span><br>    p-&gt;father = r;<br>    <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">NULL</span>)&#123; root = p; <span class="hljs-keyword">return</span>; &#125;<br>    <br>    <span class="hljs-keyword">if</span>(q == r-&gt;left) r-&gt;left = p; <br>    <span class="hljs-keyword">else</span> r-&gt;right = p;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、双旋"><a href="#3、双旋" class="headerlink" title="3、双旋"></a>3、双旋</h2><p><strong>不断旋转 $X$ 节点，为了保证复杂度，需要连续旋转两次且旋转的次序不同。</strong></p><p>定义 $X$ 的父节点为 $Y$，$Y$ 的父节点为 $Z$。 </p><h3 id="（1）-X-和-Y-同时是其父节点的左子树或者同时是各自父节点的右子树（即同侧）。"><a href="#（1）-X-和-Y-同时是其父节点的左子树或者同时是各自父节点的右子树（即同侧）。" class="headerlink" title="（1）$X$ 和 $Y$ 同时是其父节点的左子树或者同时是各自父节点的右子树（即同侧）。"></a>（1）$X$ 和 $Y$ 同时是其父节点的左子树或者同时是各自父节点的右子树（即同侧）。</h3><p>这时我们要进行两次旋转，**先旋转 $Y$，再旋转 $X$**。</p><p><img src="https://i.loli.net/2020/02/14/ftNOzGvPhIg4HrT.png" alt="2.png"></p><p><strong>同左旋转演示图如下：</strong></p><p><img src="https://i.loli.net/2020/02/14/xpoeDuh3tVzCYy1.png" alt="3.png"></p><p><strong>同右旋转演示图如下：</strong></p><p><img src="https://i.loli.net/2020/02/14/keNpErmPRzwSufY.png" alt="4.png"></p><h3 id="（2）-X-和-Y-是其父节点的左、右子树，不同侧（即一左一右或一右一左）。"><a href="#（2）-X-和-Y-是其父节点的左、右子树，不同侧（即一左一右或一右一左）。" class="headerlink" title="（2）$X$ 和 $Y$ 是其父节点的左、右子树，不同侧（即一左一右或一右一左）。"></a>（2）$X$ 和 $Y$ 是其父节点的左、右子树，不同侧（即一左一右或一右一左）。</h3><p>这时我们只要**旋转两次 X​ **即可。</p><p><img src="https://i.loli.net/2020/02/14/uqCdzUHN56bEPXI.png" alt="5.png"></p><h3 id="（3）判断-X-节点如何旋转。"><a href="#（3）判断-X-节点如何旋转。" class="headerlink" title="（3）判断 $X$ 节点如何旋转。"></a>（3）判断 $X$ 节点如何旋转。</h3><p><strong>$X$ 是其父节点的左子树则右旋，否则左旋。</strong></p><p>$X$ 若是它父节点左子树返回 <code>true</code>，否则返回 <code>false</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">getlr</span><span class="hljs-params">(node *p)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (p-&gt;father-&gt;left == p);<br>&#125;<br>  <br><span class="hljs-comment">//选择合适的旋转方式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(node *p)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(getlr(p)) right_rotate(p); <br>    <span class="hljs-keyword">else</span> left_rotate(p);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、旋转到根"><a href="#二、旋转到根" class="headerlink" title="二、旋转到根"></a>二、旋转到根</h1><p>将 $X$ 旋转到根是 <code>splay</code> 的关键，为了保证复杂度，<b>只要对 $X$ 节点操作，操作后就要将其旋转到根。</b></p><p> <em>如何旋转到根：</em> </p><ul><li><p>一步旋转就可以到根，进行单旋；</p></li><li><p>两步或两步以上，可以不断使用双旋。</p></li></ul><p>设计函数 <code>splay(p,q)</code> <strong>将 $P$ 旋转到 $Q$ 下方</strong>。</p><ul><li><code>q == NULL</code> 表示 $P$ 旋转到了根；</li><li>while $P$ 至少两次旋转才能到达：双旋；</li><li>if $P$ 还差一步满足条件：单旋。</li></ul><p><strong>Code :</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(node *p, node *tar)</span> </span>&#123;<br><br>      <span class="hljs-keyword">while</span>(p-&gt;father != tar <span class="hljs-keyword">and</span> p-&gt;father-&gt;father != tar) &#123;<br>          <span class="hljs-keyword">if</span>(getlr(p) == getlr(p-&gt;father)) &#123;<br>              rotate(p-&gt;father); rotate(p);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              rotate(p); rotate(p);<br>          &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(p-&gt;father != tar) rotate(p);<br>      <br>      update(p);  <span class="hljs-comment">//优化（避免重复维护）</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未来</title>
      <link href="/future/"/>
      <url>/future/</url>
      
        <content type="html"><![CDATA[<h1><center>未来</center></h1> <div class="note default">            <p>“When you have that last piece of the jigsaw, everything will, I hope, be clear. . . .”</p>          </div><h2>「引子」</h2><p>我听着《我们仍不知道那年中美合拍的日子》，突然，章老师走了进来。我打开空气净化器，看了看垃圾桶里闪闪发光的律师函。</p><p>总之，故事就这样开始了。</p><hr><h2>「初雪」</h2><p>六老师签售会当天，现场热闹的很。</p><p>“六爷爷……孙悟空到底有几个女朋友啊？”</p><p>“所以我经常说，”章承恩回头望了望摄像机。“戏说不是胡说，改编不是乱编。……一个民族……文化……谢罪……拿着棒子这么走……”</p><p>这时，“啊——”的一声惨叫传来。六水线旁，一名男子倒在地上，已经没有了气息。</p><p>——</p><p>“死者名叫戴杉并，29 岁，在金猴皮鞋厂工作，不过似乎并不是他的主业。在他的电脑里，我们找到了很多线索表明这位海军上将……”三谷（Mitani）汇报道。</p><p>“行了行了，”我不耐烦地打断道，“我名侦探江户川（Edogawa）可不是来听你 × × 的。说吧，名单上还有谁？”</p><p>“你怎么知道……”三谷失声道。</p><p>“喂喂，”我敲了敲桌子，“就你这智商还想干这事？告诉你吧，作者看你蠢成这样，特意派我来带你走向人生巅峰的。所以，现在——”</p><hr><h2>「正宫」</h2><p>那天，我听闻杨洁导演去世了，准备好挽联，前去吊唁。</p><p>灵堂的气氛非常肃穆。那边六老师竟也换上了一袭黑衣，毕恭毕敬地垂下头，低声道：</p><p>“今年下半年……中美合拍……杨洁导演满意……多多支持。”</p><p>我沉痛地走出灵堂，外面的天已经黑了。天上的几颗星星闪着明灭的冷光。</p><p>我低头看了看手表：十三时二十六分。</p><p>难道是……？！</p><p>我缓而又缓地回过头。气势恢宏的大堂已经了无踪影。一望无际的原野上，章老师和几个吊唁的人似乎也意识到了什么，震悚地踅向四周。</p><p>突然，一道白痕闪了光，现了一个人，急匆匆地跑了过来。我看到他那惊愕之下掩着的笑意的脸，不禁一声哀叹：</p><p>“唉！又是这个蠢货！”</p><p>就在这时，高速跑动的他像是被什么绊了一下，“咚”地一声趴在了地上。</p><p>额……我不得不承认的是，虽然作者的确缺乏才华（很多时候都要靠我自己的演技），但在关键问题的处理上却是一点也不含糊。</p><p>我一边想着，一边向人群走去。</p><hr><h2>「Q&A」</h2><p>只听得章老师对着全国人民破口大骂道：</p><p>“等我回去以后，一个一个给你们寄律师函……对了，今年下半年……”</p> <div class="note default">            <p>Question：人类的本质是什么？</p><p>Wrong Answer：复读机</p><p>Accepted：人类的本质是什么？</p>          </div><hr><h2>「设计实验」</h2><p>（好像又扯远了……说正事）</p><p>“必须灭杜！”桌对面的一个人大声喊道。我回过神来。</p><p>我皱起眉。那个名叫马三傻（Ma Wasabi）的人又来了。</p><p>旁边的那个人似乎也毫无兴致，一脸心不在焉地附和着。</p><p>“……灭杜使我成为一个完整的人。？”</p><p>“……啊？对对对，一点也不能剩。”上原（Uehara）答道。</p><p>“咦，怎么不见时川（Tokikawa）来？”我向邻座的新见（Shimmi）问道。他摇摇头。</p><p>“不知道。许是睡过头了吧。”</p><p>话虽这么说，但一个小时后，时川还没有下来。我因闲得无聊，便打开「神奇动物园」。这是一款专为睿智人群设计的高端手游，画面精良，很适合用来打发时间。</p><p>“时川还不下来？”工藤（Kudo）不耐烦道。</p><p>“要不上去看一下吧，”我提议道。</p><p>我同工藤到得他的房间口，敲了敲门。没有应声。</p><p>“等我给他打个电话。”工藤拿出寻呼机。电话铃响到第十三下时，他摇头。“没有人接。”</p><p>我们没有办法，只好找来了服务人员。我推开门：这里并没有人。</p><p>“他的背包还在，应该是没准备长时间外出的。”工藤道。</p><p>我点点头。看来也不会有什么发现了。“走吧，”我说道。</p><p>工藤和我正要离开之时，我的目光落在了浴室的门框上。门的合页上，圆珠笔迹的<strong>刻痕</strong>：</p><center>+ '5' (18) 65</center><p>？</p><p>我决定不再多想。</p><p> &emsp;</p><p>我们回到大厅。</p><p>“找到了吗？”五反田（Gotanda）问道。工藤摇头。</p><p>“已经十二点了，”高桥（Takahashi）道。“要不先吃饭吧。”</p><p> &emsp;</p><p>餐桌上的气氛非常肃穆。大家都默默吃着，seldom next 的两个人小声低语。时川到底去了哪里呢？</p><p>这时，店员端来了两面金黄的油炸哥布林。十数双筷子顿时一齐扑了过去。我没有动。</p><p>“天一……不来一块？”新见狼吞虎咽地吃着。</p><p>“奇怪，”我喃喃道，“总觉得有什么不对。”</p><p>“哪里不对了？我告诉你，完整的哥布林可是稀世珍品，难不成你想吃被滚木碾过一遍的？”他自谓幽默地笑笑，“快点吧，凉了就不好吃了。”</p><p>我取下一片，仔细检查一番；没有 clue。看来我的第六感最近也变得不准了啊，我苦笑着夹起放入嘴中。</p><p>——我呸呸几口吐了出来。“哥布林有毒！”</p><p>旁边的人惊诧地看了我一眼，随即也下意识地做了。</p><p>“什么？……有毒？”</p><p>“我们吃着什么事都没有呵……哪里有毒了？”</p><p>但我既不要无谓的辩解了。循着水木（Mizuki）惊惧的目光，工藤满口白沫地倒在了桌上，一下最后的抽搐。</p><hr><h2>「端口Ｉ」</h2><p>警察匆忙赶到现场。</p><p>“初步判断死者应该是死鱼（Diefish）氰化物中毒，”法医汇报道，“不过具体原因还要等解剖结果。”</p><p>他点点头。</p><p> &emsp;</p><p>警察和服务员简单地交谈了几句，走了。房间里笼罩着一团滞重的沉默。</p><p>“S 失踪了，Q 死了，”我自言自语道，“下一个就是我了。”</p><hr><h2>「DNS错误！」</h2><p>然而这个世界已不存在规则了。</p><hr><h2>「Loading . . .」</h2><p>“好嗨哟！”有人在我耳边喊道。</p><p>“嗨ニマ啊，要动手赶快！”我不满道。</p><p>“好的好的，”那人说着掏出一卷绳子。“我打算勒死你。不过分吧？”</p><p>“能换个更舒服的吗？这个绳子勒着好疼。”我问道。</p><p>他摇了摇头。“恐怕没有机会了。”</p><p>“喂！”已经喘不过气的我奋力嚷道。“剧本可不是这么写的！”</p><p>“我知道，”他平静地说。“你还有什么要说的吗？”</p><p>“你……”我很生气。</p><p>我边生气边想着明天早上吃什么。</p><hr><h2>「你们家的网炸了？」</h2><p>“江户川先生昨天晚上被人不改剧本就弄死了。”我悲伤地告诉了另外的几个人。</p><p>大家都非常惋惜。</p><hr><h2>「460？再见」</h2><p>两个月后。</p><p>我和高桥，新见，五反田四个人准时上了火车。</p><p>“出口竟然没被堵死，”我对新见说道。</p><p>“是啊；话说也真是的，十二个人最后就剩下了四个，连盘身份局都凑不齐……真是无聊。”新见摇头。</p><p>“对了，马三傻是怎么死的来着？”五反田（他似乎一直对这件事念念不忘）第 9102 次问道。</p><p>“唉，只有他死的最惨啊。你说是不是？”新见满脸泪光地笑了起来。</p><p>“没有办法……”我鼻子一酸。“他那天本来想去地沟弄点早点吃，结果刚一出门就让火车给撞死了……”我<strong>不由自主</strong>地哭了起来；高桥，新见，五反田也不甘示弱，一瞬间，整个车厢里哀嚎声，哭声，抽泣声，抹泪声揉作一团，是一浪高过一浪，过了好久，车厢里还回荡着一股海风的味道。</p><p>“三谷被人用诺基亚砸死了；R 上电梯时被从后面推了一下，掉到电梯井里摔死了；Y ……”五反田回忆道。</p><p>“对了，”高桥突然叫道，“还记得时川吗？”</p><p>“他可能永远都不会回来了。”我推开窗。</p><p>“为什么？”新见问道。只听得五反田似有似无的抽泣声。</p><p>“他去了另一个地方。”半晌，我长吁一口气。“一个更值得的 occasion。”</p><p>“比我们要去的这个地方更值得？”高桥问道。我用力点了点头。</p><p>之后的很长一段时间里没有人说话。</p><p><img src="https://cdn.jsdelivr.net/gh/SerokSSR/img/future1.png" alt="image-20200524131727707"></p><p>我久久地望向窗外。又是在这不经意的一刹，透过窗玻璃的反光，高桥指着我，对着正要说出什么惊天秘密似的新见使了个眼色。</p><p>我叹了口气。他们果然早已知道了一切。我所为之付的一番心血，并诩诩然以为天衣无缝的计划，不过是跳梁小丑罢了；一切都发生在那么短短的，不到十秒的时间里，可对我来说却像极了一生。</p><p>我的视线依然投在远方。看着看着，我渐渐不明白有多少东西可以称得上是变化了。<strong>世界本来就没有形状</strong>。</p><p>我想说些什么，但终究说不出口。我便一直是个如此懦弱的人。</p><p>即使是踏上这辆撞死了马三傻的火车。</p><p>“还有多长时间到？”高桥看了看手表。</p><p>“很快，”我答道。</p><p>“诶我突然有个想法，”五反田打起精神，“如果我们到站了还不下车，那么它会载我们到哪里？”</p><p>“向前。”</p><p>“Forever?”</p><p>“Yes.”</p><p>“可是……是你<strong>创造</strong>了这<strong>一切</strong>吧？”</p><p>我默然。新见好像打开了「神奇动物园」。</p><p>“Give him a rest 吧，”高桥说，“那些事不必再提了。”</p><p>我出神地望着车厢的一点。</p><p>“吱——”传来汽笛的轰鸣声。</p><p>“我们到了，”新见说。</p><p>太阳钻了出来。一阵熹微，暖融融地照在我们的脸上。</p><p>“I say . . . 我们应该给自己取个新名字吧？”五反田提议道，“毕竟西湖六月初嘛。我呢，就叫 MRC 好了。”</p><p>“我叫大辣鸡。”新见若有所思道。</p><p>“我叫大肥猪。”高桥毫不犹豫地说出了自己的心声。</p><p>“所以……你呢？”所有人的目光望向我。我惊了一下，笑容凝结在脸上。<strong>就在那边。</strong></p><p>我眨了眨眼；一切如故。</p><p><strong>原来我们是到了这里啊</strong>，我想道。不过也无所谓了。</p><p>新见和五反田 paradox 地对视着。</p><p>“天一有事吗……”高桥迟疑了一下，问道。</p><p>“没事没事，”我摆摆手，“刚才想事来着。”</p><p>太阳沉了下去。最初的一道光。</p><p>“高桥？”我唤道。她侧过脸。</p><p>“怎么啦？”</p><p>“早晨来临了。”</p><p> &emsp;</p><p>（BGM :ノルウェイの森）</p><p>（WOW）</p><p> &emsp;</p><p>（&lt;・)))&gt;&lt;&lt;）</p>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
          <category> 未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星</title>
      <link href="/star/"/>
      <url>/star/</url>
      
        <content type="html"><![CDATA[<h1><center> 星</center></h1> <h2><center>The Star - Evolution</center></h2><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;早晨 6:30，C 起床。洗漱，吃饭，上学。</p><p>&emsp;&emsp;这样的生活已经持续了 10 年。</p><p>&emsp;&emsp;他走路去上学。</p><p>&emsp;&emsp;路上有几个行人；他们看起来很快乐。</p><p>&emsp;&emsp;“打王者一样能使我快乐呀，”他想。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;他到了学校。一进教室，Peppa 迎了上来。</p><p>&emsp;&emsp;“昨天公孙离那把——你有点皮啊。”Peppa 满面红光，笑着说。</p><p>&emsp;&emsp;他也笑了笑，坐回座位，打开书包。</p><p>&emsp;&emsp;一声惨叫。</p><p>&emsp;&emsp;“Betsy！你昨天为什么没发语文笔记！”</p><p>&emsp;&emsp;“什么？哦！——”Betsy 掩面。“I’m really sorry.”</p><p>&emsp;&emsp;“别 sorry 了，赶紧拿来我抄——亏你还是代课表。”</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;S 走了进来。</p><p>&emsp;&emsp;教室里一片混乱。</p><p>&emsp;&emsp;代课表沉重而蹒跚的脚步声，组长催作业的叫嚷声，没交作业者的哭喊声，执勤班长杯水车薪的“Shh! ”声：一片大杂烩。</p><p>&emsp;&emsp;“同学们好。”S 提高了声音。</p><p>&emsp;&emsp;“老——师——好——”零零星星几个同学那里传来活无常似的叫声。</p><p>&emsp;&emsp;S 摇摇头。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;L 正在讲课。</p><p>&emsp;&emsp;他的目光锁定了一个已经倒伏了半节课的学生。</p><p>&emsp;&emsp;“C：起来回答这道题。”</p><p>&emsp;&emsp;C 揉揉惺忪的睡眼。</p><p>&emsp;&emsp;“老…老师哪道题？”他有气无力地问道。</p><p>&emsp;&emsp;旁边，Betsy 用手使劲捅了他一下。“拼成边长 <code>sqrt(2) &lt;&lt; 1</code> 的正方形。”她低声说；他并没有听见。</p><p>&emsp;&emsp;“下午 4:00，家长来校。我亲自给你母亲打电话。坐。”</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;L 冷冷地说。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;他站起身。</p><p>&emsp;&emsp;“他天天打王者，结果都玩了好几年了，段位还是钻石：我一个月前刚玩都已经上星耀了。”</p><p>&emsp;&emsp;“是；你知道为什么他最近一直没吃鸡吗？”</p><p>&emsp;&emsp;“愿闻其详。”</p><p>&emsp;&emsp;那人压低了声音。“他之前一直用外挂，被封号了。”他说。</p><p>&emsp;&emsp;“哦～；怪不得他之前……别说了。”另一个人看到他向他们瞥了一眼，连忙说道。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;……</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;打发完朋友关切的质问，他独自一个人走在回家的路上。那天是愚人节，万家灯火，宝马雕车香满路。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;他悚然一惊。</p><p>&emsp;&emsp;是，他看过余华的书，看过春生的戏份，知道活，有时孰难于死；可他也看过吴承恩的书，看过龙婆的戏份，知道好死不如赖活。</p><p>&emsp;&emsp;他停了下来。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;“今天是星期五啊，”他突然想起，“我可以在外面待到8点的。现在还早的很。”</p><p>&emsp;&emsp;街上大包小包的人群；他们很快乐。</p><p>&emsp;&emsp;快乐是什么？</p><p>&emsp;&emsp;上个月考过一篇作文：</p><p>&emsp;&emsp;《那天，我捡到了快乐的钥匙》。他写的是他登上了王者全服第一。他知道，这次作文又要得D了。</p><p>&emsp;&emsp;可是……</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;？</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;他找到一条长凳，坐了下来。</p><p>&emsp;&emsp;天空中现出一道橘光。他睁大双眼。</p><p>&emsp;&emsp;“哇！流星！”几个人喊道。</p><p>&emsp;&emsp;绝望攫住了他的心。心中却并不是一片黑暗。</p><p>&emsp;&emsp;世上的牵挂……Maybe Betsy？Or Daniel？Kamen？</p><p>&emsp;&emsp;But, am I really their friend? Or I should say, are they really my friends?</p><p>&emsp;&emsp;Seems not. （我似乎变的豁达了。）</p><p>&emsp;&emsp;他摇了摇头。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;他站起身。空气中弥漫着违和的气氛。</p><p>&emsp;&emsp;他似乎能够感受到那拼命想要置他于死地的虚空。</p><p>&emsp;&emsp;“谢谢你，”他说。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;“你不能这样！”</p><p>&emsp;&emsp;“为什么？”</p><p>&emsp;&emsp;“你还没上星耀！”</p><p>&emsp;&emsp;星耀？他想。那不是我一直的理想吗？为什么我现在对此却这样木然？</p><p>&emsp;&emsp;流星雨还在下。</p><p>&emsp;&emsp;一道星光射向他的心间。他的心忽而苏生了过来。</p><p>&emsp;&emsp;他闭上眼。</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;“没有涅槃，也没有收获罢。”</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;他转身；他消失在白夜中。</p><p>   &emsp;&emsp;    </p><p>&emsp;&emsp;——</p><p> &emsp;&emsp;</p><p>&emsp;&emsp;“I got the story, ”他举起一张纸, “From his will. ”</p><p>&emsp;&emsp;Betsy 脸上铺满泪水。Daniel 仍然绷着那张死鱼脸，只是嘴角向上微微翘了翘。Scistar “扑通”一声倒在了地上。</p><p>&emsp;&emsp;只有 Supreme 似乎毫无反应。</p><p>&emsp;&emsp;“你还早两万年呢，”他说。</p><p>&emsp;&emsp;</p><div class="note default">            <p>一八，四，五，津沽。</p>          </div>]]></content>
      
      
      <categories>
          
          <category> 小说 &amp; 随笔 </category>
          
          <category> 星 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小说 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于自己</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><h3 id="Basic-Info"><a href="#Basic-Info" class="headerlink" title="Basic Info"></a>Basic Info</h3><p>&emsp;Hometown：天津</p><p>&emsp;破壳年：2004</p><p>&emsp;星座：巨蟹座 Cnc</p><p>&emsp;职业：创作者、读者、高玩、云玩家、OIer、学生、……</p><p>&emsp;Admiration：村上春树、汪曾祺、曹雪芹、宫崎骏、余华、J.K.Rowing、……</p><p>&emsp;Favorite：<em><b>1Q84</b></em></p><p>&emsp;工作单位：天津市第一中学</p><p>&emsp;职称：高一</p><p>&emsp;Contact：<i class="fab fa-qq"></i> 3091742436</p><h3 id="现实"><a href="#现实" class="headerlink" title="现实"></a>现实</h3><table><thead><tr><th align="center">2018.7</th><th align="center">入坑</th><th align="center">?</th><th align="center">我要 AK IOI</th></tr></thead><tbody><tr><td align="center">2018</td><td align="center">NOIp - PJ</td><td align="center">1=</td><td align="center">?</td></tr><tr><td align="center">2019</td><td align="center">CSP - S2</td><td align="center">2=</td><td align="center">没脸见人</td></tr></tbody></table><h3 id="梦里"><a href="#梦里" class="headerlink" title="梦里"></a>梦里</h3><table><thead><tr><th align="center">2020</th><th align="center"><del>CSP - S2</del> NOIp - TG</th><th align="center">全国前 $20%$</th><th align="center"><strong>頑張って!</strong></th></tr></thead><tbody><tr><td align="center">2021</td><td align="center">NOI</td><td align="center">?</td><td align="center"><strong>頑張って!</strong></td></tr></tbody></table><h3 id="To-Do-List"><a href="#To-Do-List" class="headerlink" title="To-Do List"></a>To-Do List</h3><ul><li>Checkbox &amp; Radio</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><p>如需交换友链，请在下方留言</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Yaml"><span class="hljs-comment"># 基本配置项</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Seeker</span><br><span class="hljs-attr">link:</span> <span class="hljs-string">https://snow.js.org/</span><br><span class="hljs-attr">avatar:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/SerokSSR/img/share.jpg</span><br><span class="hljs-attr">short_descr:</span> <span class="hljs-string">木有灵希</span> <span class="hljs-comment"># 如果描述栏空间较小</span><br><span class="hljs-attr">full_descr:</span> <span class="hljs-string">九死南荒吾不恨，兹游奇绝冠平生</span> <span class="hljs-comment"># 如果描述栏空间较充裕</span><br><br><span class="hljs-comment"># 如果你使用的主题支持下列配置项，最好加上</span><br><span class="hljs-attr">background:</span> <span class="hljs-string">&#x27;#4D6F8A&#x27;</span><br><span class="hljs-attr">text:</span> <span class="hljs-string">white</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">C/C++</span>, <span class="hljs-string">OI</span>]<br></code></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>樂特全球後援會</title>
      <link href="/lete/index.html"/>
      <url>/lete/index.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://sm.ms/image/zxVUebPYywoLrIl" target="_blank"><img src="https://i.loli.net/2020/08/01/zxVUebPYywoLrIl.png" style="zoom: 200%;" /></a></p><p><a href="https://sm.ms/image/GjNEr9AQZC5hT3z" target="_blank" ><img src="https://i.loli.net/2020/08/02/GjNEr9AQZC5hT3z.png" style="zoom: 200%;" /></a></p><p><a href="https://sm.ms/image/D7mUtSNWk1MReTi" target="_blank" ><img src="https://i.loli.net/2020/08/02/D7mUtSNWk1MReTi.png" style="zoom: 200%;" /></a></p><p><a href="https://sm.ms/image/UKHWws3Adnzoa6O" target="_blank" ><img src="https://i.loli.net/2020/08/02/UKHWws3Adnzoa6O.png" style="zoom: 200%;" /></a></p><p><a href="https://sm.ms/image/1H5SYgkNRTacr3O" target="_blank" ><img src="https://i.loli.net/2020/08/02/1H5SYgkNRTacr3O.png" style="zoom: 200%;" /></a></p><p><a href="https://sm.ms/image/pKd3QFHcN95v1mg" target="_blank" ><img src="https://i.loli.net/2020/08/02/pKd3QFHcN95v1mg.png" style="zoom: 200%;" /></a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/self/consolas.css"/>
      <url>/self/consolas.css</url>
      
        <content type="html"><![CDATA[@font-face {  font-family: 'consolas';  font-style: normal;  font-weight: normal;  src: local('consolas'), url(/self/consola.woff2) format('woff2')}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/self/optimize.css"/>
      <url>/self/optimize.css</url>
      
        <content type="html"><![CDATA[/* 滚动条 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: #49b1f5;  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #49b1f5;}/* 页脚footer *//* 渐变色滚动动画 */@-webkit-keyframes Gradient {    0% {        background-position: 0 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0 50%;    }}@-moz-keyframes Gradient {    0% {        background-position: 0 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0 50%;    }}@keyframes Gradient {    0% {        background-position: 0 50%;    }    50% {        background-position: 100% 50%;    }    100% {        background-position: 0 50%;    }}#footer {    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite;    -o-user-select: none;    -ms-user-select: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    border-top-left-radius: 10px;    border-top-right-radius: 10px;}#footer:before {    background-color: rgba(0, 0, 0, 0);}/* 其他 */#pagination .page-number {     border-radius: 20px; }#aside_content .card-info .author-info__name {     font-weight: 600;}#rightside > div > button, #rightside > div > a {    width: 32px;     height: 32px;     border-radius: 20px;}h1,h2,h3,h4,h5,h6 {    color: #3b444c;}h1 {    font-size: 2.25em;}h2 {    font-size: 1.75em;}h3 {    font-size: 1.5em;}h4 {    font-size: 1.25em;}h5 {    font-size: 1em;}h6 {   font-size: 1em;    color: #777;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/self/tomorrow.css"/>
      <url>/self/tomorrow.css</url>
      
        <content type="html"><![CDATA[/* original::  color: #4d4d4c;/* 新添加的內容 *//* ------------------------------------- *//* 代碼框背景色和字體顔色，與 hljs 一樣就行 *//* 必須配置 (把下面 .hljs 的 color 和 background 複製到這裏來) */#article-container pre, #article-container figure.highlight {  background: #fcfbfb;  color: #4d4d4c;}/* 代碼框工具欄 (如果你關掉了copy、lang 和 shrink，可不用配置這個 */#article-container figure.highlight .highlight-tools {  background: #F3F3F3;  color: #4d4d4c;}/* 代碼框行數 (如果已經關掉 line_number，可以不用配置這個) */#article-container figure.highlight .gutter pre {  background: #fbfafa;  /*background: #F1F1F1;*/  color: #5c5b5b;}/* Tomorrow Comment */.hljs-comment,.hljs-quote {  color: #8e908c;}/* Tomorrow Red */.hljs-variable,.hljs-template-variable,.hljs-tag,.hljs-name,.hljs-selector-id,.hljs-selector-class,.hljs-regexp,.hljs-deletion {  color: #c82829;}/* Tomorrow Orange */.hljs-number,.hljs-built_in,.hljs-builtin-name,.hljs-literal,.hljs-type,.hljs-params,.hljs-meta,.hljs-link {  color: #f5871f;}/* Tomorrow Yellow */.hljs-attribute {  color: #eab700;}/* Tomorrow Green */.hljs-string,.hljs-symbol,.hljs-bullet,.hljs-addition {  color: #718c00;}/* Tomorrow Blue */.hljs-title,.hljs-section {  color: #4271ae;}/* Tomorrow Purple */.hljs-keyword,.hljs-selector-tag {  color: #8959a8;}#article-container figure.highlight .hljs {  display: block;  overflow-x: auto;  background: #fcfbfb;  color: #4d4d4c;  padding: 0.5em;}.hljs-emphasis {  font-style: italic;}.hljs-strong {  font-weight: bold;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/image/pwa/manifest.json"/>
      <url>/image/pwa/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"Serok's Blog","short_name":"Seeker","theme_color":"#49b1f5","background_color":"#49b1f5","display":"minimal-ui","scope":"/","start_url":"/","icons":[{"src":"https://snow.js.org/image/pwaicons/192.png","sizes":"192x192","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
  
</search>
